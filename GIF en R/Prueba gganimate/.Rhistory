muestras_n=function(n,Nrep){
variables=suma=promedio=c()
for(i in (1:Nrep)){
aux=rnorm(n,mean=5,sd=4)
variables=c(variables,list(aux))
suma=c(suma,list(sum(aux)))
promedio=c(promedio,list(mean(aux)))
}
names(variables);names(suma);names(promedio)=(1:Nrep)
c('Variables'=variables,'Suma'=suma,'Promedio'=promedio)
}
muestras_n(1,2)
muestras_n=function(n,Nrep){
variables=suma=promedio=c()
for(i in (1:Nrep)){
aux=rnorm(n,mean=5,sd=4)
variables=c(variables,list(aux))
suma=c(suma,list(sum(aux)))
promedio=c(promedio,list(mean(aux)))
}
c('Variables'=variables,'Suma'=suma,'Promedio'=promedio)
}
muestras_n(1,2)
muestras_n(1,3)
muestras_n(1,3)$Promedio3
data.frame(muestras_n(1,2))
data.frame(muestras_n(2,2))
data.frame(muestras_n(3,1))
muestras_n=function(n,Nrep){
variables=suma=promedio=c()
for(i in (1:Nrep)){
aux=rnorm(n,mean=5,sd=4)
variables=c(variables,list(aux))
suma=c(suma,list(sum(aux)))
promedio=c(promedio,list(mean(aux)))
}
names(variables);names(suma);names(promedio)=(1:Nrep)
}
muestras_n(1,2)
muestras_n=function(n,Nrep){
variables=suma=promedio=c()
for(i in (1:Nrep)){
aux=rnorm(n,mean=5,sd=4)
variables=c(variables,list(aux))
suma=c(suma,list(sum(aux)))
promedio=c(promedio,list(mean(aux)))
}
names(variables);names(suma);names(promedio)=(1:Nrep)
c(variables,suma,promedio)
}
muestras_n(1,2)
muestras_n=function(n,Nrep){
variables=suma=promedio=c()
for(i in (1:Nrep)){
aux=rnorm(n,mean=5,sd=4)
variables=c(variables,list(aux))
suma=c(suma,list(sum(aux)))
promedio=c(promedio,list(mean(aux)))
}
names(variables)=paste('Variables',(1:Nrep))
names(suma)=paste('Suma',(1:Nrep))
names(promedio)==paste('Promedio',(1:Nrep))
c(variables,suma,promedio)
}
muestras_n(1,2)
muestras_n=function(n,Nrep){
variables=suma=promedio=c()
for(i in (1:Nrep)){
aux=rnorm(n,mean=5,sd=4)
variables=c(variables,list(aux))
suma=c(suma,list(sum(aux)))
promedio=c(promedio,list(mean(aux)))
}
names(variables)=paste('Variables',(1:Nrep))
names(suma)=paste('Suma',(1:Nrep))
names(promedio)=paste('Promedio',(1:Nrep))
c(variables,suma,promedio)
}
muestras_n(1,2)
data.frame(muestras_n(1,3))
data.frame(muestras_n(2,3))
data.frame(muestras_n(5,1))
install.packages("gganimate")
install.packages('gifski')
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(ggplot2)
var.gen=function(n,Nrep){
tabla=c()
for(i in (1:n)){
tabla=cbind(tabla,rnorm(Nrep,5,4))
}
data.frame(tabla)
}
plot_histogram <- function(df, feature) {
plt <- ggplot(df, aes(x=eval(parse(text=feature)))) +
geom_histogram(aes(y = ..density..), alpha=0.7, fill="#33AADE", color="black") +
geom_density(alpha=0.3, fill="red") +
geom_vline(aes(xintercept=mean(eval(parse(text=feature)))), color="black", linetype="dashed", size=1) +
labs(x=feature, y = "Density")
print(plt)
}
plot_multi_histogram <- function(df, feature, label_column) {
plt <- ggplot(df, aes(x=eval(parse(text=feature)), fill=eval(parse(text=label_column)))) +
geom_histogram(alpha=0.7, position="identity", aes(y = ..density..), color="black") +
geom_density(alpha=0.7) +
geom_vline(aes(xintercept=mean(eval(parse(text=feature)))), color="black", linetype="dashed", size=1) +
labs(x=feature, y = "Density")
plt + guides(fill=guide_legend(title=label_column))
}
data=var.gen(1,1000)
# como los experimentos son las filas suma y producto es
# sumar y promediar cada fila y por eso apply(-,1,-)
suma=apply(data,1,sum)
prom=apply(data,1,mean)
hist(suma,freq=F,col='pink',main='Suma y promedio',
density=10,angle=45)
curve(dnorm(x,5,4),add=T,col='red')
hist(prom,freq=F,col='DeepSkyBlue1',main='Promedio',add=T,
density=10,angle=135)
curve(dnorm(x,5,4),add=T,col='blue')
data=var.gen(1,1000)
suma=apply(data,1,sum)
prom=apply(data,1,mean)
ggplot()+
geom_histogram(aes(x=suma,weight=1/1000),alpha=0.7, fill="#33AADE", color="black") +
# alpha establece la opacidad de la capa
# fill (color de relleno) está dado es la rgb specification
# i.e. "#RRGGBB" donde RR, GG, BB está en hexadecimal
geom_density(aes(x=suma),alpha=0.2, fill="red")
# Además le agrego aes(weight=1/1000) para que en el eje y muestra
# freq relativ, i.e. divido cada valor de y por Nrep=1000
ggplot()+
geom_histogram(aes(x=suma,y = (..count..)/sum(..count..)),alpha=0.7, fill="#33AADE", color="black") +
geom_density(aes(x=suma),alpha=0.2, fill="red")
# otra forma es aclararle que quiero el eje y normalizado
ggplot()+
geom_histogram(aes(x=suma,y = (..count..)/sum(..count..)),alpha=0.7, fill="#33AADE", color="black") +
geom_density(aes(x=suma),alpha=0.2, fill="red")
data=var.gen(1,1000)
suma=apply(data,1,sum)
prom=apply(data,1,mean)
ggplot() +
geom_histogram(aes(x=suma,y = ..density..), alpha=0.2, fill="pink",
col='red',position = 'identity') +
geom_density(aes(x=suma),alpha=0.2, col='red')+
geom_histogram(aes(x=prom,y = ..density..), alpha=0.2, fill="DeepSkyBlue1",
col='blue',position = 'identity')+
geom_density(aes(x=prom),alpha=0.2, col='blue')
data=var.gen(2,1000)
# como los experimentos son las filas suma y producto es
# sumar y promediar cada fila y por eso apply(-,1,-)
suma=apply(data,1,sum)
prom=apply(data,1,mean)
hist(suma,freq=F,col='pink',main='Suma y promedio',
density=10,angle=45)
curve(dnorm(x,5,4),add=T,col='red')
hist(prom,freq=F,col='DeepSkyBlue1',main='Promedio',add=T,
density=10,angle=135)
curve(dnorm(x,5,4),add=T,col='blue')
data=var.gen(2,1000)
suma=apply(data,1,sum)
prom=apply(data,1,mean)
ggplot() +
geom_histogram(aes(x=suma,y = ..density..), alpha=0.2, fill="pink",
col='red',position = 'identity') +
geom_density(aes(x=suma),alpha=0.2, col='red')+
geom_histogram(aes(x=prom,y = ..density..), alpha=0.2, fill="DeepSkyBlue1",
col='blue',position = 'identity')+
geom_density(aes(x=prom),alpha=0.2, col='blue')
data=c()
for(i in c(5,10,15)){
data=c(data,var.gen(i,1000))
}
# como los experimentos son las filas suma y producto es
# sumar y promediar cada fila y por eso apply(-,1,-)
suma=apply(data,1,sum)
for(i in c(5,10,15)){
paste('data_',i)=var.gen(i,1000)
}
paste('data_',1)
paste('data_',1)=1
paste('data_',1)<-1
"data"=1
data
paste('data_',1)[1]=1
for(i in c(5,10,15)){
list(paste('data_',i)=var.gen(i,1000))
tabla=c()
for(i in c(5,10,15)){
tabla=cbind(tabla,var.gen(i,1000))
}
var.gen(5,10)
var.gen(6,10)
cbind(var.gen(5,10),var.gen(6,10))
tabla=c()
tabla=c(tabla,var.gen(5,100))
tabla=c(tabla,var.gen(5,100))
tabla
tabla=c()
for(i in c(5,10,15)){
tabla=cbind(tabla,var.gen(i,1000))
}
tabla=c()
tabla=cbind(tabla,var.gen(5,100))
tabla=data.frame()
for(i in c(5,10,15)){
tabla=cbind(tabla,var.gen(i,1000))
}
tabla=matrix()
for(i in c(5,10,15)){
tabla=cbind(tabla,var.gen(i,1000))
}
abla
tabla
tabla=matrix()
for(i in c(5,10,15)){
tabla=cbind(tabla,(1:i)=var.gen(i,1000))
tabla=matrix()
for(i in c(5,10,15)){
tabla=cbind(tabla,var.gen(i,1000))
}
suma=apply(tabla,1,sum)
prom=apply(tabla,1,mean)
suma
tabla
apply(tabla,1,sum)
apply(tabla,2,sum)
View(tabla)
suma=apply(tabla,1,sum,na.rm=T)
suma
tabla(na.rm=T)
tabla[na.rm=T]
rep(c("blue","red","green"),c(1,2,3))
tabla=matrix()
for(i in c(5,10,15)){
tabla=cbind(tabla,var.gen(i,1000))
}
suma=apply(tabla,1,sum,na.rm=T)
prom=apply(tabla,1,mean,na.rm=T)
hist(suma,freq=F,col=rep(c("blue","red","green"),c(5,10,15)),main='Suma y promedio',
density=10,angle=45)
rand_color
rand_color(1)
install.packages('randomColor')
install.packages('randomcoloR')
randomColor()
tabla=matrix()
for(i in c(5,10,15)){
tabla=cbind(tabla,var.gen(i,1000))
}
suma=apply(tabla,1,sum,na.rm=T)
prom=apply(tabla,1,mean,na.rm=T)
hist(suma[1:15],freq=F,col="pink",main='Suma y promedio',
density=10,angle=45)
curve(dnorm(x,5,4),add=T,col='red')
hist(prom[1:15],freq=F,col='DeepSkyBlue1',main='Promedio',add=T,
density=10,angle=135)
curve(dnorm(x,5,4),add=T,col='blue')
hist(suma[1:15],freq=F,col="blue",main='Suma y promedio',
density=10,angle=45, add=T)
curve(dnorm(x,5,4),add=T,col='red')
hist(prom[1:15],freq=F,col='DeepSkyBlue1',main='Promedio',add=T,
density=10,angle=135)
curve(dnorm(x,5,4),add=T,col='blue')
hist(suma[1:15],freq=F,col="blue",main='Suma y promedio',
density=10,angle=45, add=T)
curve(dnorm(x,5,4),add=T,col='red')
hist(prom[1:15],freq=F,col='DeepSkyBlue1',main='Promedio',add=T,
density=10,angle=135)
curve(dnorm(x,5,4),add=T,col='blue')
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(ggplot2)
var.gen=function(n,Nrep){
tabla=c()
for(i in (1:n)){
tabla=cbind(tabla,rnorm(Nrep,5,4))
}
data.frame(tabla)
}
plot_histogram <- function(df, feature) {
plt <- ggplot(df, aes(x=eval(parse(text=feature)))) +
geom_histogram(aes(y = ..density..), alpha=0.7, fill="#33AADE", color="black") +
geom_density(alpha=0.3, fill="red") +
geom_vline(aes(xintercept=mean(eval(parse(text=feature)))), color="black", linetype="dashed", size=1) +
labs(x=feature, y = "Density")
print(plt)
}
plot_multi_histogram <- function(df, feature, label_column) {
plt <- ggplot(df, aes(x=eval(parse(text=feature)), fill=eval(parse(text=label_column)))) +
geom_histogram(alpha=0.7, position="identity", aes(y = ..density..), color="black") +
geom_density(alpha=0.7) +
geom_vline(aes(xintercept=mean(eval(parse(text=feature)))), color="black", linetype="dashed", size=1) +
labs(x=feature, y = "Density")
plt + guides(fill=guide_legend(title=label_column))
}
data=var.gen(1,1000)
# como los experimentos son las filas suma y producto es
# sumar y promediar cada fila y por eso apply(-,1,-)
suma=apply(data,1,sum)
prom=apply(data,1,mean)
hist(suma,freq=F,col='pink',main='Suma y promedio',
density=10,angle=45)
curve(dnorm(x,5,4),add=T,col='red')
hist(prom,freq=F,col='DeepSkyBlue1',main='Promedio',add=T,
density=10,angle=135)
curve(dnorm(x,5,4),add=T,col='blue')
data=var.gen(1,1000)
suma=apply(data,1,sum)
prom=apply(data,1,mean)
ggplot()+
geom_histogram(aes(x=suma,weight=1/1000),alpha=0.7, fill="#33AADE", color="black") +
# alpha establece la opacidad de la capa
# fill (color de relleno) está dado es la rgb specification
# i.e. "#RRGGBB" donde RR, GG, BB está en hexadecimal
geom_density(aes(x=suma),alpha=0.2, fill="red")
# Además le agrego aes(weight=1/1000) para que en el eje y muestra
# freq relativ, i.e. divido cada valor de y por Nrep=1000
ggplot()+
geom_histogram(aes(x=suma,y = (..count..)/sum(..count..)),alpha=0.7, fill="#33AADE", color="black") +
geom_density(aes(x=suma),alpha=0.2, fill="red")
# otra forma es aclararle que quiero el eje y normalizado
ggplot()+
geom_histogram(aes(x=suma,y = (..count..)/sum(..count..)),alpha=0.7, fill="#33AADE", color="black") +
geom_density(aes(x=suma),alpha=0.2, fill="red")
data=var.gen(1,1000)
suma=apply(data,1,sum)
prom=apply(data,1,mean)
ggplot() +
geom_histogram(aes(x=suma,y = ..density..), alpha=0.2, fill="pink",
col='red',position = 'identity') +
geom_density(aes(x=suma),alpha=0.2, col='red')+
geom_histogram(aes(x=prom,y = ..density..), alpha=0.2, fill="DeepSkyBlue1",
col='blue',position = 'identity')+
geom_density(aes(x=prom),alpha=0.2, col='blue')
data=var.gen(2,1000)
# como los experimentos son las filas suma y producto es
# sumar y promediar cada fila y por eso apply(-,1,-)
suma=apply(data,1,sum)
prom=apply(data,1,mean)
hist(suma,freq=F,col='pink',main='Suma y promedio',
density=10,angle=45)
curve(dnorm(x,5,4),add=T,col='red')
hist(prom,freq=F,col='DeepSkyBlue1',main='Promedio',add=T,
density=10,angle=135)
curve(dnorm(x,5,4),add=T,col='blue')
data=var.gen(2,1000)
suma=apply(data,1,sum)
prom=apply(data,1,mean)
ggplot() +
geom_histogram(aes(x=suma,y = ..density..), alpha=0.2, fill="pink",
col='red',position = 'identity') +
geom_density(aes(x=suma),alpha=0.2, col='red')+
geom_histogram(aes(x=prom,y = ..density..), alpha=0.2, fill="DeepSkyBlue1",
col='blue',position = 'identity')+
geom_density(aes(x=prom),alpha=0.2, col='blue')
tabla=matrix()
for(i in c(5,10,15)){
tabla=cbind(tabla,var.gen(i,1000))
}
suma=apply(tabla,1,sum,na.rm=T)
prom=apply(tabla,1,mean,na.rm=T)
hist(suma[1:15],freq=F,col="pink",main='Suma y promedio',
density=10,angle=45)
curve(dnorm(x,5,4),add=T,col='red')
hist(prom[1:15],freq=F,col='DeepSkyBlue1',main='Promedio',add=T,
density=10,angle=135)
curve(dnorm(x,5,4),add=T,col='blue')
hist(suma[1:15],freq=F,col="blue",main='Suma y promedio',
density=10,angle=45, add=T)
curve(dnorm(x,5,4),add=T,col='red')
hist(prom[1:15],freq=F,col='DeepSkyBlue1',main='Promedio',add=T,
density=10,angle=135)
curve(dnorm(x,5,4),add=T,col='blue')
hist(suma[1:15],freq=F,col="blue",main='Suma y promedio',
density=10,angle=45, add=T)
curve(dnorm(x,5,4),add=T,col='red')
hist(prom[1:15],freq=F,col='DeepSkyBlue1',main='Promedio',add=T,
density=10,angle=135)
curve(dnorm(x,5,4),add=T,col='blue')
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(ggplot2)
library(gganimate)
library(tidyverse)
setwd("~/Escritorio/1er Cuatri/Ciencia de Datos con R: Fundamentos Estadisticos/Prácticas/Guia 15/Resolucion/Prueba gganimate")
gdpPercap <- read_csv('income_..._adjusted.csv')
gdpPercap <- read_csv('income_per_person_gdppercapita_ppp_inflation_adjusted.csv')
lifeExp <- read_csv('life_expectancy_years.csv')
gdpPercap <- read_csv('income_per_person_gdppercapita_ppp_inflation_adjusted.csv')
lifeExp <- read_csv('life_expectancy_years.csv')
View(lifeExp)
View(gdpPercap)
hispam_vec <- c(
'Argentina', 'Brazil', 'Bolivia', 'Chile', 'Colombia',
'Costa Rica', 'Cuba', 'Dominican Republic', 'Ecuador',
'El Salvador', 'Guatemala', 'Honduras', 'Mexico',
'Nicaragua', 'Panama', 'Paraguay', 'Peru', 'Uruguay',
'Spain', 'Puerto Rico', 'Venezuela' )
gdpPercap <- filter(gdpPercap, country %in% hispam_vec)
lifeExp <- filter(lifeExp, country %in% hispam_vec)
gdpPercap_tidy <- gather(gdpPercap, "year", "gdpPercap", -1)
View(gdpPercap_tidy)
lifeExp_tidy <- gather(lifeExp, "year", "lifeExp", -1)
gapminder_hispam <- inner_join(gdpPercap_tidy, lifeExp_tidy,
by = c("country" = "country", "year" = "year"))
View(gapminder_hispam)
assign_code <- function(country_name){
country_code = 'ar'
return(country_code)
}
countries <- list(Argentina = 'ar',
Brazil = 'br',
Bolivia = 'bo',
Chile = 'cl',
Colombia = 'co',
Costa_Rica = 'cr',
Cuba = 'cu',
Dominican_Republic = 'do',
Ecuador = 'ec',
El_Salvador = 'sv',
Guatemala = 'gt',
Honduras = 'hn',
Mexico = 'mx',
Nicaragua = 'ni',
Panama = 'pa',
Paraguay = 'py',
Peru = 'pe',
Puerto_Rico = 'pr',
Spain = 'es',
Uruguay = 'uy',
Venezuela = 've')
assign_code <- function(country_name){
# white spaced country name
if (country_name == 'Costa Rica') {
country_name <- 'Costa_Rica'
} else if (country_name == 'Dominican Republic') {
country_name <- 'Dominican_Republic'
} else if (country_name == 'El Salvador') {
country_name <- 'El_Salvador'
} else if (country_name == 'Puerto Rico') {
country_name <- 'Puerto_Rico'
}
# para todos los demas
country_code <- countries[[country_name]]
return(country_code)
}
View(gapminder_hispam)
gapminder_hispam <- mutate(gapminder_hispam,
code = mapply(assign_code, as.character(country)),
log_gdppc = log10(gdpPercap/4))
install.packages('ggflag')
devtools::install_github('rensa/ggflags')
install_github('rensa/ggflags')
library(ggflags)
# install.packages("gifski")
library(gifski)
install.packages("gifski")
install.packages("gifski")
install.packages("devtools")
install_github('rensa/ggflags')
devtools::install_github('rensa/ggflags')
library(gganimate)
# devtools::install_github('rensa/ggflags')
library(ggflags)
# install.packages("gifski")
library(gifski)
anim <- gapminder_hispam %>%
filter(year >= 1900) %>%
ggplot(aes(x = log_gdppc, y = lifeExp, country = code)) +
theme(text = element_text(size=20)) +
ylim(10,90) +
scale_x_continuous(breaks = c(2,3,4),
labels = c("$400","$4 000","$40 000"),
limits = c(2,4.1)) +
geom_flag(size = 10) +
transition_states(year, transition_length = 1, state_length = 1) +
ylab('Años de vida') +
xlab('Ingreso por persona (USD)') +
ggtitle('Ahora mostrando año {closest_state}')
# animate it
animate(anim,
width = 400, height = 400,
nframes = 480, fps = 24)
anim <- gapminder_hispam %>%
filter(year >= 1900) %>%
ggplot(aes(x = log_gdppc, y = lifeExp, country = code)) +
theme(text = element_text(size=20)) +
ylim(10,90) +
scale_x_continuous(breaks = c(2,3,4),
labels = c("$400","$4 000","$40 000"),
limits = c(2,4.1)) +
geom_flag(size = 10) +
transition_states(year, transition_length = 1, state_length = 1) +
ylab('Años de vida') +
xlab('Ingreso por persona (USD)') +
ggtitle('Ahora mostrando año {closest_state}')
# animate it
animate(anim,
width = 400, height = 400,
nframes = 480, fps = 24)
View(anim)
animate(anim,
width = 400, height = 400,
nframes = 480, fps = 24)
gganimate(anim,
width = 400, height = 400,
nframes = 480, fps = 24)
animate(anim,
width = 400, height = 400,
nframes = 480, fps = 24)
