lidar.V$potencias9<-lidar.V$potencias1^9
lidar.V$potencias10<-lidar.V$potencias1^10
# errores para modelos lineales de 1 a 10
mean((lidar.V$logratio-predict(modelo.1, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.2, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.3, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.4, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.5, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.6, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.7, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.8, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.9, lidar.V))^2) #da un warning message porque hay un NA en el coef 9 (?)
mean((lidar.V$logratio-predict(modelo.10, lidar.V))^2) #da un warning message porque hay un NA en el coef (?)
##################################################
par(mfrow=c(2,5))
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.1), lwd=2, col="black")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.2), lwd=2, col="red")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.3), lwd=2, col="cadetblue")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.4), lwd=2, col="yellow3")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.5), lwd=2, col="deeppink1")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.6), lwd=2, col="darkmagenta")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.7), lwd=2, col="coral3")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.8), lwd=2, col="orange")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.9), lwd=2, col="blue")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.10), lwd=2, col="red")
par(mfrow=c(1,1))
lidar<-read.table("lidar.txt", header = T, sep = "")
setwd("~/Escritorio/1er Cuatri/Ciencia de Datos con R_ Fundamentos Estadisticos/Prácticas/Guia 25/Resolucion Guia 25 Clase")
lidar<-read.table("lidar.txt", header = T, sep = "")
names(lidar)<-c("range", "logratio")
attach(lidar)
# separo un %10 para el training set
set.seed(100)
indices<-sort(sample(1:length(range), 22, replace = FALSE))
lidar.T<-lidar[-indices,]
lidar.V<-lidar[indices,]
potencias<-function(i){
return(lidar.T$range^i)
}
#1
modelo.4<-lm(formula = lidar.T$logratio ~ potencias(1)+potencias(2)+potencias(3)+potencias(4))
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.4), lwd=2, col="magenta")
#2
modelo.9<-lm(formula = lidar.T$logratio ~ potencias(1)+potencias(2)+potencias(3)+potencias(4)+potencias(5)+potencias(6)+potencias(7)+potencias(8)+potencias(9))
modelo.9
modelo.10<-lm(formula = lidar.T$logratio ~ potencias(1)+potencias(2)+potencias(3)+potencias(4)+potencias(5)+potencias(6)+potencias(7)+potencias(8)+potencias(9)+potencias(10))
modelo.10
# el coeficiente 9 de estos modelos da NA ????
lines(lidar.T$range, predict(modelo.9), lwd=5, col="blue")
lines(lidar.T$range, predict(modelo.10), lwd=2, col="red")
#3
#paso a variables porque si bien no hay problemas con la funcion lm(), la funcion predict() solo acepta variables
potencias1<-potencias(1)
potencias2<-potencias(2)
potencias3<-potencias(3)
potencias4<-potencias(4)
potencias5<-potencias(5)
potencias6<-potencias(6)
potencias7<-potencias(7)
potencias8<-potencias(8)
potencias9<-potencias(9)
potencias10<-potencias(10)
modelo.1<-lm(formula = lidar.T$logratio ~ potencias1)
modelo.2<-lm(formula = lidar.T$logratio ~ potencias1+potencias2)
modelo.3<-lm(formula = lidar.T$logratio ~ potencias1+potencias2+potencias3)
modelo.4<-lm(formula = lidar.T$logratio ~ potencias1+potencias2+potencias3+potencias4)
modelo.5<-lm(formula = lidar.T$logratio ~ potencias1+potencias2+potencias3+potencias4+potencias5)
modelo.6<-lm(formula = lidar.T$logratio ~ potencias1+potencias2+potencias3+potencias4+potencias5+potencias6)
modelo.7<-lm(formula = lidar.T$logratio ~ potencias1+potencias2+potencias3+potencias4+potencias5+potencias6+potencias7)
modelo.8<-lm(formula = lidar.T$logratio ~ potencias1+potencias2+potencias3+potencias4+potencias5+potencias6+potencias7+potencias8)
modelo.9<-lm(formula = lidar.T$logratio ~ potencias1+potencias2+potencias3+potencias4+potencias5+potencias6+potencias7+potencias8+potencias9)
modelo.10<-lm(formula = lidar.T$logratio ~ potencias1+potencias2+potencias3+potencias4+potencias5+potencias6+potencias7+potencias8+potencias9+potencias10)
#necesito agregar esas variables al training set porque tienen que existir para la funci?n predict()
names(lidar.V)<-c("potencias1", "logratio")
lidar.V$potencias2<-lidar.V$potencias1^2
lidar.V$potencias3<-lidar.V$potencias1^3
lidar.V$potencias4<-lidar.V$potencias1^4
lidar.V$potencias5<-lidar.V$potencias1^5
lidar.V$potencias6<-lidar.V$potencias1^6
lidar.V$potencias7<-lidar.V$potencias1^7
lidar.V$potencias8<-lidar.V$potencias1^8
lidar.V$potencias9<-lidar.V$potencias1^9
lidar.V$potencias10<-lidar.V$potencias1^10
# errores para modelos lineales de 1 a 10
mean((lidar.V$logratio-predict(modelo.1, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.2, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.3, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.4, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.5, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.6, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.7, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.8, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.9, lidar.V))^2) #da un warning message porque hay un NA en el coef 9 (?)
mean((lidar.V$logratio-predict(modelo.10, lidar.V))^2) #da un warning message porque hay un NA en el coef (?)
##################################################
par(mfrow=c(2,5))
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.1), lwd=2, col="black")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.2), lwd=2, col="red")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.3), lwd=2, col="cadetblue")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.4), lwd=2, col="yellow3")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.5), lwd=2, col="deeppink1")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.6), lwd=2, col="darkmagenta")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.7), lwd=2, col="coral3")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.8), lwd=2, col="orange")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.9), lwd=2, col="blue")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.10), lwd=2, col="red")
par(mfrow=c(1,1))
mean((lidar.V$logratio-predict(modelo.1, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.2, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.3, lidar.V))^2)
poli9
poli9_1
modelo.7
poli9_1=lm(formula=training_set$logratio ~
range+range2+range3+range4+range5+range6+range7+range8+range9)
poli9=lm(logratio ~ poly(training_set$range, 9, raw=TRUE),data=training_set)
test_set=datos[indices,]
# Arreglamos test_set para que coincida con las variables del predictor
for(i in 2:10){
# Arranco en i=2 porque range^1 ya está en test_set
test_set[,i+1]=test_set$range^i
}
f=poly(test_set$range,9,raw=FALSE)
names(test_set)=c('range','logratio',paste('range',2:10,sep=""))
f
test_set
View(lidar.T)
names(lidar.V)<-c("potencias1", "logratio")
lidar.V$potencias2<-lidar.V$potencias1^2
lidar.V$potencias3<-lidar.V$potencias1^3
lidar.V$potencias4<-lidar.V$potencias1^4
lidar.V$potencias5<-lidar.V$potencias1^5
lidar.V$potencias6<-lidar.V$potencias1^6
lidar.V$potencias7<-lidar.V$potencias1^7
lidar.V$potencias8<-lidar.V$potencias1^8
lidar.V$potencias9<-lidar.V$potencias1^9
lidar.V$potencias10<-lidar.V$potencias1^10
View(lidar.V)
View(modelo.10)
a=predict(modelo.1, lidar.V)
length(a)
test_set
names(test_set)
poli9$coefficients
poli9$coefficients[2]
poli9$coefficients[2:]
poli9$coefficients[2::]
poli9$coefficients[2:..]
1::
a=c(1,2,3,4,5)
a[1:]
a[1::]
a[1..]
a[1:..]
?::
?:
m=length(poli9$coefficients)
length(poli9$coefficients[2:m]
)
poli9$coefficients[2:m]
names(test_set)
names(test_set)[2:m]
names(test_set)[1:m][-2]
poli9$coefficients[2:m]=names(test_set)[2:m]
poli9$coefficients
poli9$coefficients[2:m]
poli9$coefficients[2:m]=names(test_set)[2:m]
poli9
poli9$coefficients[2:m]=paste('range',1:9)
poli9$coefficients
?poly
names(poli9$coefficients)
names(poli9$coefficients[2:m])=paste('range',1:9)
poli9$coefficients
poli9
poli9=lm(logratio ~ poly(training_set$range, 9, raw=TRUE),data=training_set)
poli9
names(poli)
names(poli9)
names(poli9$coefficients)
names(poli9$coefficients)=c('(Intercept)',paste('range',2:9))
poli9
names(poli9$coefficients)=c('(Intercept)',paste('range',1:9,sep=""))
poli9
poli9_1=lm(formula=training_set$logratio ~
range+range2+range3+range4+range5+range6+range7+range8+range9)
poli9_1
poli9=lm(logratio ~ poly(training_set$range, 9, raw=TRUE),data=training_set)
names(poli9$coefficients[2:9])=paste('range',2:9)
poli9
names(poli9$coefficients)=c('(Intercept)',paste('range',2:9))
poli9
names(poli9$coefficients)=c('(Intercept)',paste('range',1:9,sep=""))
poli9
test_set=datos[indices,]
# Arreglamos test_set para que coincida con las variables del predictor
for(i in 2:10){
# Arranco en i=2 porque range^1 ya está en test_set
test_set[,i+1]=test_set$range^i
}
names(test_set)=c('range','logratio',paste('range',2:10,sep=""))
test_set
names(test_set)
a=predict(poli9,data=test_set)
length(a)
poli9
names(test_set)
names(lidar.V)
View(poli9)
View(test_set)
names(test_set)=c('range1','logratio',paste('range',2:10,sep=""))
a=predict(poli9,data=test_set)
length(a)
test_set=datos[indices,]
# Arreglamos test_set para que coincida con las variables del predictor
for(i in 2:9){
# Arranco en i=2 porque range^1 ya está en test_set
test_set[,i+1]=test_set$range^i
}
names(test_set)=c('range1','logratio',paste('range',2:9,sep=""))
names(test_set)
poli9$coefficients
a=predict(poli9,test_set)
predict(poli9,data=test_set)
mean((lidar.V$logratio-predict(modelo.9, lidar.V))^2)
names(lidar.V);modelo.9$coefficients
names(test_set);poli9$coefficients
predict(modelo.9, lidar.V)
predict(poli9, test_set)
lidar.V
length(lidar.V)
length(test_set)
indices=sample(length(datos$range),size=0.2*length(datos$range))
test_set=datos[indices,]
training_set=datos[-indices,]
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(ggplot2)
library(tidyr)
library(gganimate)
datos=read.csv('lidar.csv',header=TRUE)[,1:2]
names(datos)=c('range','logratio')
indices=sample(length(datos$range),size=0.2*length(datos$range))
test_set=datos[indices,]
training_set=datos[-indices,]
poli4=lm(training_set$logratio ~ poly(training_set$range, 4, raw=TRUE))
# otra forma
# poli4=predict(lm(formula=training_set$logratio ~ range+range2+range3+range4))
# esto devuelve el vector de logratios estimados
# poli4=function(x){
#   betas=lm(formula=training_set$logratio ~ range+range2+range3+range4)$coefficients
#   sum(betas*c(1,x,x^2,x^3,x^4))
# }
datos_plot=data.frame(cbind('Range'=training_set$range,
'Lineal_4'=predict(poli4)))
datos_plot %>%
ggplot()+
geom_point(data=training_set,aes(x=range,y=logratio))+
geom_line(aes(x=Range,y=Lineal_4,col='Poli deg=4'))+
scale_color_manual("Estimador",
breaks=c('Poli deg=4'),
values=c('red'))
range=training_set$range
range2=range^2
range3=range^3
range4=range^4
range5=range^5
range6=range^6
range7=range^7
range8=range^8
range9=range^9
range10=range^10
# poli9=function(x){
# betas=lm(formula=training_set$logratio ~ range+range2+range3+range4+
# range5+range6+range7+range8+range9)$coefficients
###################################################
# Una forma de escribir lm
poli9_1=lm(formula=training_set$logratio ~
range+range2+range3+range4+range5+range6+range7+range8+range9)
# Otra. Uso esta
poli9=lm(logratio ~ poly(training_set$range, 9, raw=TRUE),data=training_set)
names(poli9$coefficients)=c('(Intercept)',paste('range',1:9,sep=""))
# Otra
poli10=lm(training_set$logratio ~ poly(training_set$range, 10, raw=TRUE))
datos_plot=data.frame(cbind('Range'=training_set$range,
'Lineal_4'=predict(poli4),
'Lineal_9'=predict(poli9),
'Lineal_10'=predict(poli10)))
datos_plot %>%
ggplot()+
geom_point(data=training_set,aes(x=range,y=logratio))+
geom_line(aes(x=Range,y=Lineal_4,col='Poli deg=4'))+
geom_line(aes(x=Range,y=Lineal_9,col='Poli deg=9'))+
geom_line(aes(x=Range,y=Lineal_10,col='Poli deg=10'))+
scale_color_manual("Estimador",
breaks=c('Poli deg=4','Poli deg=9','Poli deg=10'),
values=c('red','blue','green'))
test_set=datos[indices,]
# Arreglamos test_set para que coincida con las variables del predictor
for(i in 2:9){
# Arranco en i=2 porque range^1 ya está en test_set
test_set[,i+1]=test_set$range^i
}
names(test_set)=c('range1','logratio',paste('range',2:9,sep=""))
# Errores
mean((test_set$logratio-predict(poli9,data=test_set))^2)
mean((test_set$logratio-predict(poli10,data=test_set))^2)
predict(poli9,data=test_set)
poli9$coefficients
names(test_set)
predict(poli9,data=test_set)
predict(poli9,test_set)
poli9
lidar<-read.table("lidar.txt", header = T, sep = "")
names(lidar)<-c("range", "logratio")
attach(lidar)
# separo un %10 para el training set
set.seed(100)
indices<-sort(sample(1:length(range), 22, replace = FALSE))
lidar.T<-lidar[-indices,]
lidar.V<-lidar[indices,]
potencias<-function(i){
return(lidar.T$range^i)
}
#1
modelo.4<-lm(formula = lidar.T$logratio ~ potencias(1)+potencias(2)+potencias(3)+potencias(4))
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.4), lwd=2, col="magenta")
#2
modelo.9<-lm(formula = lidar.T$logratio ~ potencias(1)+potencias(2)+potencias(3)+potencias(4)+potencias(5)+potencias(6)+potencias(7)+potencias(8)+potencias(9))
modelo.9
modelo.10<-lm(formula = lidar.T$logratio ~ potencias(1)+potencias(2)+potencias(3)+potencias(4)+potencias(5)+potencias(6)+potencias(7)+potencias(8)+potencias(9)+potencias(10))
modelo.10
# el coeficiente 9 de estos modelos da NA ????
lines(lidar.T$range, predict(modelo.9), lwd=5, col="blue")
lines(lidar.T$range, predict(modelo.10), lwd=2, col="red")
#3
#paso a variables porque si bien no hay problemas con la funcion lm(), la funcion predict() solo acepta variables
potencias1<-potencias(1)
potencias2<-potencias(2)
potencias3<-potencias(3)
potencias4<-potencias(4)
potencias5<-potencias(5)
potencias6<-potencias(6)
potencias7<-potencias(7)
potencias8<-potencias(8)
potencias9<-potencias(9)
potencias10<-potencias(10)
modelo.1<-lm(formula = lidar.T$logratio ~ potencias1)
modelo.2<-lm(formula = lidar.T$logratio ~ potencias1+potencias2)
modelo.3<-lm(formula = lidar.T$logratio ~ potencias1+potencias2+potencias3)
modelo.4<-lm(formula = lidar.T$logratio ~ potencias1+potencias2+potencias3+potencias4)
modelo.5<-lm(formula = lidar.T$logratio ~ potencias1+potencias2+potencias3+potencias4+potencias5)
modelo.6<-lm(formula = lidar.T$logratio ~ potencias1+potencias2+potencias3+potencias4+potencias5+potencias6)
modelo.7<-lm(formula = lidar.T$logratio ~ potencias1+potencias2+potencias3+potencias4+potencias5+potencias6+potencias7)
modelo.8<-lm(formula = lidar.T$logratio ~ potencias1+potencias2+potencias3+potencias4+potencias5+potencias6+potencias7+potencias8)
modelo.9<-lm(formula = lidar.T$logratio ~ potencias1+potencias2+potencias3+potencias4+potencias5+potencias6+potencias7+potencias8+potencias9)
modelo.10<-lm(formula = lidar.T$logratio ~ potencias1+potencias2+potencias3+potencias4+potencias5+potencias6+potencias7+potencias8+potencias9+potencias10)
#necesito agregar esas variables al training set porque tienen que existir para la funci?n predict()
names(lidar.V)<-c("potencias1", "logratio")
lidar.V$potencias2<-lidar.V$potencias1^2
lidar.V$potencias3<-lidar.V$potencias1^3
lidar.V$potencias4<-lidar.V$potencias1^4
lidar.V$potencias5<-lidar.V$potencias1^5
lidar.V$potencias6<-lidar.V$potencias1^6
lidar.V$potencias7<-lidar.V$potencias1^7
lidar.V$potencias8<-lidar.V$potencias1^8
lidar.V$potencias9<-lidar.V$potencias1^9
lidar.V$potencias10<-lidar.V$potencias1^10
# errores para modelos lineales de 1 a 10
mean((lidar.V$logratio-predict(modelo.1, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.2, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.3, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.4, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.5, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.6, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.7, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.8, lidar.V))^2)
mean((lidar.V$logratio-predict(modelo.9, lidar.V))^2) #da un warning message porque hay un NA en el coef 9 (?)
mean((lidar.V$logratio-predict(modelo.10, lidar.V))^2) #da un warning message porque hay un NA en el coef (?)
##################################################
par(mfrow=c(2,5))
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.1), lwd=2, col="black")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.2), lwd=2, col="red")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.3), lwd=2, col="cadetblue")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.4), lwd=2, col="yellow3")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.5), lwd=2, col="deeppink1")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.6), lwd=2, col="darkmagenta")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.7), lwd=2, col="coral3")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.8), lwd=2, col="orange")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.9), lwd=2, col="blue")
plot(range, logratio, lwd=1, col="darkgreen")
lines(lidar.T$range, predict(modelo.10), lwd=2, col="red")
par(mfrow=c(1,1))
modelo.10
poli9
predict(modelo.10,test_set)
predict(poli9,lidar.V)
names(poli9$coefficients)=names(modelo.9$coefficients)
predict(poli9,lidar.V)
poli9==modelo.9
poli9
modelo.9
as.formula(training_set$range,training_set$range^2)
as.formula(training_set$range+training_set$range^2)
poli9=lm(formula=training_set$logratio ~
range+range2+range3+range4+range5+range6+range7+range8+range9)
test_set=datos[indices,]
# Arreglamos test_set para que coincida con las variables del predictor
for(i in 2:9){
# Arranco en i=2 porque range^1 ya está en test_set
test_set[,i+1]=test_set$range^i
}
names(test_set)=c('range1','logratio',paste('range',2:9,sep=""))
mean((test_set$logratio-predict(poli9,data=test_set))^2)
predict(poli9,test_set)
poli9$coefficients
names(test_set)
test_set=datos[indices,]
test_set$range1=test_set$range
test_set$range1=test_set$range
test_set$range2=test_set$range^2
test_set$range3=test_set$range^3
test_set$range4=test_set$range^4
test_set$range5=test_set$range^5
test_set$range6=test_set$range^6
test_set$range7=test_set$range^7
test_set$range8=test_set$range^8
test_set$range9=test_set$range^9
test_set$range10=test_set$range^10
predict(poli9,newdata=test_set)
test_set_2=datos[indices,]
# Arreglamos test_set para que coincida con las variables del predictor
for(i in 2:9){
# Arranco en i=2 porque range^1 ya está en test_set
test_set_2[,i+1]=test_set_2$range^i
}
names(test_set_2)=c('range1','logratio',paste('range',2:9,sep=""))
test_set==test_set_2
View(test_set_2)
View(test_set)
test_set_2=datos[indices,]
# Arreglamos test_set para que coincida con las variables del predictor
for(i in 1:9){
# Arranco en i=2 porque range^1 ya está en test_set
test_set_2[,i+1]=test_set_2$range^i
}
names(test_set_2)=c('range','logratio',paste('range',1:9,sep=""))
test_set_2=datos[indices,]
# Arreglamos test_set para que coincida con las variables del predictor
for(i in 1:9){
# Arranco en i=2 porque range^1 ya está en test_set
test_set_2[,i+1]=test_set_2$range^i
}
test_set_2=datos[indices,]
# Arreglamos test_set para que coincida con las variables del predictor
for(i in 1:9){
# Arranco en i=2 porque range^1 ya está en test_set
test_set_2[,i+2]=test_set_2$range^i
}
names(test_set_2)=c('range','logratio',paste('range',1:9,sep=""))
predict(poli9,newdata=test_set)
predict(poli9,newdata=test_set_2)
mean((test_set_2$logratio-predict(poli9,newdata=test_set_2))^2)
poli9_2=lm(logratio ~ poly(training_set$range, 9, raw=TRUE),data=training_set)
names(poli9_2$coefficients)=c('(Intercept)',paste('range',1:9,sep=""))
predict(poli9_2,newdata=test_set_2)
predict(poli10,newdata=test_set_2)
mean((test_set_2$logratio-predict(poli10,newdata=test_set_2))^2)
mean((test_set_2$logratio-predict(poli9,newdata=test_set_2))^2)
poli9
poli9:2
poli9_22
poli9
poli9_2
poli9_2=lm(training_set$logratio ~ poly(training_set$range, 9, raw=TRUE))
names(poli9_2$coefficients)=c('(Intercept)',paste('range',1:9,sep=""))
predict(poli9_2,newdata=test_set_2)
predict(poli9_2,newdata=test_set)
mean((test_set_2$logratio-predict(poli9,newdata=test_set_2))^2) # este anda
mean((test_set_2$logratio-predict(poli9_2,newdata=test_set_2))^2) # este no anda
mean((test_set_2$logratio-predict(poli10,newdata=test_set_2))^2) # este no anda
