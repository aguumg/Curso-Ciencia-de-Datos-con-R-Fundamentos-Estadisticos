cos(pi)
sin(pi)
cos(pi/2)
grilla=seq(-2*í,2*pi,0.01)
f=function(x){
salida=1-2*cos(x)
}
y=lapply(griila, f)
plot(grilla,y)
grilla=seq(-2*í,2*pi,0.01)
f=function(x){
salida=1-2*cos(x)
}
y=lapply(grilla, f)
plot(grilla,y)
grilla=seq(-2*í,2*pi,0.01)
f=function(x){
salida=1-2*cos(x)
}
y=lapply(grilla, f)
plot(grilla,y)
grilla=seq(-2*pí,2*pi,0.01)
f=function(x){
salida=1-2*cos(x)
}
y=lapply(grilla, f)
plot(grilla,y)
grilla=seq(-2*pí,2*pi,0.01)
grilla=seq(-2*pi,2*pi,0.01)
f=function(x){
salida=1-2*cos(x)
}
y=lapply(grilla, f)
plot(grilla,y)
grilla=seq(-2*pi,2*pi,0.01)
f=function(x){
salida=1-x^10}
y=lapply(grilla, f)
plot(grilla,y)
grilla=seq(-2*pi,2*pi,0.01)
f=function(x){
salida=1-x^10}
y=lapply(grilla, f)
plot(grilla,y, type='l')
grilla=seq(-2*pi,2*pi,0.01)
f=function(x){
salida=2*sin(x)-x}
y=lapply(grilla, f)
plot(grilla,y, type='l')
)lapply(list, function)
?lapply
f
f=function(x,c){
salida=x-2*sin(x)+c}
f
f(NA,1)
f(1,NA)
a=f(1,NA)
a
g=function(x){x-2*sin(x)}
y=lapply(grilla, g)
plot(grilla,y, type='l')
y=sapply(grilla, f,0)
plot(grilla,y, type='l')
?sapply
y=sapply(grilla, f,c=0)
lines(h=0)
plot(grilla,y, type='l')
lines(h=0)
=lines
?lines
plot(grilla,y, type='l')
lines(grilla,y,h=0)
plot(grilla,y, type='l')
y=sapply(grilla, f,c=0)
grilla=seq(-2*pi,2*pi,0.01)
plot(grilla,y, type='l')
plot(y,grilla, type='l')
pi
plot(y,grilla, type='l')
abline(h=0)
plot(y,grilla, type='l')
abline(h=c(pi/3,4*pi/3))
abline(h=c(pi/3,4*pi/3),v=0)
abline(h=c(pi/3,pi,4*pi/3),v=0)
abline(h=c(0,pi/3,pi,4*pi/3),v=0)
abline(h=c(-pi/3,0,pi/3,pi,4*pi/3),v=0)
abline(h=c(-4*pi/3,-pi/3,0,pi/3,pi,4*pi/3),v=0)
setwd("~/Escritorio/1er Cuatri/Ciencia de Datos con R_ Fundamentos Estadisticos/Prácticas/Guia 7/Resolución")
setwd("~/Escritorio/1er Cuatri/Ciencia de Datos con R_ Fundamentos Estadisticos/Prácticas/Guia 7/Resolución")
knitr::opts_chunk$set(echo = TRUE)
alturas=read.csv('alturas_n_200.csv',header = T)
attach(alturas)
names(alturas)
altura
promedio_M=mean(altura[genero==M])
promedio_M=mean(altura[genero=='M'])
mean(altura[genero=='M']
altura[genero=='M']
promedio_M_bajita=mean(altura[genero=='M' & contextura_madre='bajita'])
promedio_M_bajita=mean(altura[genero=='M' & contextura_madre=='bajita'])
## Tarea 2
promedio_total
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
alturas=read.csv('alturas_n_200.csv',header = T)
attach(alturas)
names(alturas)
dim(alturas)[1]
promedio_total=mean(altura)
promedio_M=mean(altura[genero=='M'])
promedio_F=mean(altura[genero=='F'])
promedio_M_bajita=mean(altura[genero=='M' & contextura_madre=='bajita'])
# altura_mama=
# plot(altura_mama,altura,col=c('pink','red'))
promedio_total
promedio_M
promedio_F
promedio_M_bajita
caca=read.csv('alturas_n_200.csv')
View(caca)
View(alturas)
caca=read.csv('alturas_n_200.csv',header = F)
View(caca)
str()
names()
install.packages("PASWR2")
airquality
attach(airquality)
Ozone
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
x=c(1,2,3)
y=c(6,5,4)
x*2 # Multiplica cada elemento de x por 2
x*y # Multiplica x_i*y_i
x[1]*y[2] #Multiplica x_1*y_2
1/x #Devuelve el vector formado por los inversos de cada coord de x
(1:10)*x[2] #Multiplica cada coord del vector (1,...,10) por x[2]
rep(c(1,1,2),times=2) #Devuelve el vector (1,1,2,1,1,2)
#seq(...) devuelve un vector de longitud 5 empezando en 0 y terminando en 10
#Los vectores v_1, v_2 se podrán sumar siempre que length(v_1)=n*length(v_2)
#en tal caso si pensamos a v_1 como n vectores de longitud length(v_2)
#v_1+v_2 le suma a v_2 cada uno de esos n vectores y devuelve el vector de longitud n*length(v_2) resultante.
seq(from=0,to=10,length.out=5)+1:10
#Veamos que ocurre si se multiplican vectores de distinta longitud
z=c(1,2,3,4)
x*z
#devuelve error porque length(z)!=n*length(x), para todo n.
tratamiento=c(rep('A',20),rep('B',18),rep('C',22))
J=seq(1,30,2)
J[1]+J[8]
sum((1:100))
sum((1:100)^2)
#a) El cjto de datos tiene 153 observaciones y 6 variables.
dim(airquality)
#b) Los nombres de las variables son:
names(airquality)
#c) Una forma:
#Gracias a los comandos
attach(airquality) #Para poder buscar las variables sin usar airquality$Ozone, etc. Ver search() para mostrar todos los paquetes/nombres atachados.
Ozone
Solar.R
Wind
Temp
Month
Day
detach(airquality) #Elimino airquality de la database de R listada en search().
#Vemos que las variables con datos faltantes son Ozone y Solar.R.
#(no es muy eficiente esta resolución, pero no se como buscar elementos que cumplan cierta función)
#Otra forma:
which(Ozone==is.na) #no funca, ver dps de la duda.
Month
length(which(Month==5))
length(which(Month==5))
setwd("~/Escritorio/1er Cuatri/Ciencia de Datos con R_ Fundamentos Estadisticos/Prácticas/Guia 1/Resolución parte 1")
c(1,2,3)
x=c(1,2,3)
1 in x
(1 in x)
is(1,x)
is(x,1)
altura
names(altra)
names(altura)
alturas=read.csv('alturas_n_200.csv',header = T)
attach(alturas)
setwd("~/Escritorio/1er Cuatri/Ciencia de Datos con R_ Fundamentos Estadisticos/Prácticas/Guia 7/Resolución")
alturas=read.csv('alturas_n_200.csv',header = T)
View(alturas)
attach(alturas)
altura[altura_madre==170]
altura[altura_madre<=170]
altura[150<=altura_madre<=170]
altura[150<=altura_madre & altura_madre<=170]
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
alturas=read.csv('alturas_n_200.csv',header = T)
attach(alturas)
names(alturas)
dim(alturas)[1]
nrow(alturas)
promedio_total=mean(altura)
promedio_M=mean(altura[genero=='M'])
promedio_F=mean(altura[genero=='F'])
promedio_M_bajita=mean(altura[genero=='M' & contextura_madre=='bajita'])
plot(altura_madre,altura,col=c('pink','red'))
mean(altura[156-filtro <= altura_madre & altura_madre<= 156+filtro])
filtro=1
mean(altura[156-filtro <= altura_madre & altura_madre<= 156+filtro])
promedio_madre_ventana(altura_mama,filtro){
plot(altura_madre,altura,type='n')
points(altura_madre[genero=='M'],altura[genero=='M'],col='blue')
points(altura_madre[genero=='F'],altura[genero=='F'],col='pink')
plot(altura_madre,altura,type='n')
points(altura_madre[genero=='M'],altura[genero=='M'],col='blue')
points(altura_madre[genero=='F'],altura[genero=='F'],col='red')
abline(h=seq(156-filtro,156+filtro,0.1))
plot(altura_madre,altura,type='n')
points(altura_madre[genero=='M'],altura[genero=='M'],col='blue')
points(altura_madre[genero=='F'],altura[genero=='F'],col='red')
abline(v=seq(156-filtro,156+filtro,0.1),col='grey')
