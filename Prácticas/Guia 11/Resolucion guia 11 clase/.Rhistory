frecuencias=table(unique(sort(altura)),aux,row.names=c('alturas','frecuencias'))
frecuencias=table(unique(sort(altura)),aux)
View(frec_muchas_perseverancia_exito)
frecuencias
frecuencias_2=data.frame(unique(sort(altura)),aux)
View(frecuencias_2)
?data.frame
View(frecuencias_2)
frecuencias=data.frame('alturas'=unique(sort(altura)),'frecuencias'=aux)
View(frecuencias)
frecuencias$frecuencias
max(frecuencias$frecuencias)
moda=frecuencias$altura[frecuencias$frecuencias==max(frecuencias$frecuencias)]
moda
View(frecuencias)
frecuencias$altura[frecuencias$frecuencias==9]
plot(density(altura))
hist(altura,freq=F,main="Histograma de densidad",
nclass=15, col="red",xlab="Alturas hijos")
points(density(altura))
hist(altura,freq=F,main="Histograma de densidad",
nclass=15, col="red",xlab="Alturas hijos")
points(density(altura),type='l',col='blue')
View(alturas)
par(mfrow=c(1,2))
hist(altura[genero=='M'],freq=F,main="Histograma de densidad",
nclass=6, col="blue",xlab="Alturas hijos hombres")
hist(altura[genero=='F'],freq=F,main="Histograma de densidad",
nclass=6, col="red",xlab="Alturas hijas mujeres")
par(mfrow=c(1,2))
hist(altura[genero=='M'],freq=F,main="Histograma de densidad",
nclass=10, col="blue",xlab="Alturas hijos hombres")
hist(altura[genero=='F'],freq=F,main="Histograma de densidad",
nclass=10, col="red",xlab="Alturas hijas mujeres")
media_M=mean(altura[genero=='M'])
desvio_M=sd(altura[genero=='M'])
grilla_M=seq(range(altura[genero=='M'])[1],
range(altura[genero=='M'])[2],length=100)
funn_M=dnorm(grilla_M,media_M,desvio_M)
media_F=mean(altura[genero=='F'])
desvio_F=sd(altura[genero=='F'])
grilla_F=seq(range(altura[genero=='F'])[1],
range(altura[genero=='F'])[2],length=100)
funn_F=dnorm(grilla_F,media_F,desvio_F)
par(mfrow=c(1,2))
hist(altura[genero=='M'],freq=F,main="Histograma de densidad",
nclass=10, col="blue",xlab="Alturas hijos hombres")
lines(grilla_M,funn_M,col="blue",lwd=2)
hist(altura[genero=='F'],freq=F,main="Histograma de densidad",
nclass=10, col="red",xlab="Alturas hijas mujeres")
lines(grilla_F,funn_F,col="blue",lwd=2)
hist(altura[genero=='M'],freq=F,main="Histograma de densidad",
nclass=10, col="blue",xlab="Alturas hijos hombres")
lines(grilla_M,funn_M,lwd=2)
hist(altura[genero=='F'],freq=F,main="Histograma de densidad",
nclass=10, col="red",xlab="Alturas hijas mujeres")
lines(grilla_F,funn_F,lwd=2)
par(mfrow=c(1,2))
hist(altura[genero=='M'],freq=F,main="Histograma de densidad",
nclass=10, col="blue",xlab="Alturas hijos hombres")
lines(grilla_M,funn_M,lwd=2)
hist(altura[genero=='F'],freq=F,main="Histograma de densidad",
nclass=10, col="red",xlab="Alturas hijas mujeres")
lines(grilla_F,funn_F,lwd=2)
View(alturas)
promedio_M_bajita=mean(altura[genero=='M' & contextura_madre=='bajita'])
promedio_M
promedio_M_bajita
hist(altura,freq=F,main="Histograma de densidad",
nclass=15, col="red",xlab="Alturas hijos")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
alturas=read.csv('alturas_n_500.csv',header = T)
attach(alturas)
names(alturas)
promedio_total=mean(altura)
hist(altura,freq=F,main="Histograma de densidad",
nclass=15, col="red",xlab="Alturas hijos")
aux=c()
for(i in unique(sort(altura))){
aux=c(aux, sum(altura==i))
}
frecuencias=data.frame('alturas'=unique(sort(altura)),'frecuencias'=aux)
moda=frecuencias$altura[frecuencias$frecuencias==max(frecuencias$frecuencias)]
moda
plot(density(altura))
hist(altura,freq=F,main="Histograma de densidad",
nclass=15, col="red",xlab="Alturas hijos")
points(density(altura),type='l',col='blue')
par(mfrow=c(1,2))
hist(altura[genero=='M'],freq=F,main="Histograma de densidad",
nclass=10, col="blue",xlab="Alturas hijos hombres")
hist(altura[genero=='F'],freq=F,main="Histograma de densidad",
nclass=10, col="red",xlab="Alturas hijas mujeres")
media_M=mean(altura[genero=='M'])
desvio_M=sd(altura[genero=='M'])
grilla_M=seq(range(altura[genero=='M'])[1],
range(altura[genero=='M'])[2],length=100)
funn_M=dnorm(grilla_M,media_M,desvio_M)
media_F=mean(altura[genero=='F'])
desvio_F=sd(altura[genero=='F'])
grilla_F=seq(range(altura[genero=='F'])[1],
range(altura[genero=='F'])[2],length=100)
funn_F=dnorm(grilla_F,media_F,desvio_F)
par(mfrow=c(1,2))
hist(altura[genero=='M'],freq=F,main="Histograma de densidad",
nclass=10, col="blue",xlab="Alturas hijos hombres")
lines(grilla_M,funn_M,lwd=2)
hist(altura[genero=='F'],freq=F,main="Histograma de densidad",
nclass=10, col="red",xlab="Alturas hijas mujeres")
lines(grilla_F,funn_F,lwd=2)
promedio_M=mean(altura[genero=='M'])
promedio_F=mean(altura[genero=='F'])
promedio_M_bajita=mean(altura[genero=='M' & contextura_madre=='bajita'])
promedio_M
promedio_M_bajita
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
alturas=read.csv('alturas_n_500.csv',header = T)
attach(alturas)
names(alturas)
promedio_total=mean(altura)
hist(altura,freq=F,main="Histograma de densidad",
nclass=15, col="red",xlab="Alturas hijos")
aux=c()
for(i in unique(sort(altura))){
aux=c(aux, sum(altura==i))
}
frecuencias=data.frame('alturas'=unique(sort(altura)),'frecuencias'=aux)
moda=frecuencias$altura[frecuencias$frecuencias==max(frecuencias$frecuencias)]
moda
plot(density(altura))
hist(altura,freq=F,main="Histograma de densidad",
nclass=15, col="red",xlab="Alturas hijos")
points(density(altura),type='l',col='blue')
par(mfrow=c(1,2))
hist(altura[genero=='M'],freq=F,main="Histograma de densidad",
nclass=10, col="blue",xlab="Alturas hijos hombres")
hist(altura[genero=='F'],freq=F,main="Histograma de densidad",
nclass=10, col="red",xlab="Alturas hijas mujeres")
media_M=mean(altura[genero=='M'])
desvio_M=sd(altura[genero=='M'])
grilla_M=seq(range(altura[genero=='M'])[1],
range(altura[genero=='M'])[2],length=100)
funn_M=dnorm(grilla_M,media_M,desvio_M)
media_F=mean(altura[genero=='F'])
desvio_F=sd(altura[genero=='F'])
grilla_F=seq(range(altura[genero=='F'])[1],
range(altura[genero=='F'])[2],length=100)
funn_F=dnorm(grilla_F,media_F,desvio_F)
par(mfrow=c(1,2))
hist(altura[genero=='M'],freq=F,main="Histograma de densidad",
nclass=10, col="blue",xlab="Alturas hijos hombres")
lines(grilla_M,funn_M,lwd=2)
hist(altura[genero=='F'],freq=F,main="Histograma de densidad",
nclass=10, col="red",xlab="Alturas hijas mujeres")
lines(grilla_F,funn_F,lwd=2)
promedio_M=mean(altura[genero=='M'])
promedio_F=mean(altura[genero=='F'])
promedio_M_bajita=mean(altura[genero=='M' & contextura_madre=='bajita'])
promedio_M
promedio_M_bajita
plot(altura_madre,altura,type='n')
points(altura_madre[genero=='M'],altura[genero=='M'],col='blue')
points(altura_madre[genero=='F'],altura[genero=='F'],col='red')
plot(altura_madre,altura,type='n')
plot(altura_madre,altura,type='n')
points(altura_madre[genero=='M'],altura[genero=='M'],col='blue')
points(altura_madre[genero=='F'],altura[genero=='F'],col='red')
altura_madre[genero=='M']==156
sum(altura_madre[genero=='M']==156)
sum(155.5 <= altura_madre[genero=='M'] & altura_madre[genero=='M'] <= 156.5)
log(e)
log(1)
grilla=seq(1.001,10,0.01)
f=function(t,c){
log((t-1)/(t+1))+c
}
g=function(x){
exp(x)-1
}
plot(grilla,sapply(grilla,f,0),col='red',type='l')
points(grilla,sapply(grilla,f,1),col='blue',type='l')
points(grilla,sapply(grilla,f,2),col='green',type='l')
points(grilla,sapply(grilla,f,-2),col='magenta',type='l')
grilla=seq(-10,10,0.01)
plot(grilla,sapply(grilla,g,0),col='red',type='l')
points(grilla,sapply(grilla,g,1),col='blue',type='l')
points(grilla,sapply(grilla,g,2),col='green',type='l')
points(grilla,sapply(grilla,g,-2),col='magenta',type='l')
g=function(x,c){
(exp(1/2*t+c)+1)/(1-exp(1/2*t+c))
}
plot(grilla,sapply(grilla,g,0),col='red',type='l')
points(grilla,sapply(grilla,g,1),col='blue',type='l')
points(grilla,sapply(grilla,g,2),col='green',type='l')
points(grilla,sapply(grilla,g,-2),col='magenta',type='l')
g=function(t,c){
(exp(1/2*t+c)+1)/(1-exp(1/2*t+c))
}
plot(grilla,sapply(grilla,g,0),col='red',type='l')
points(grilla,sapply(grilla,g,1),col='blue',type='l')
points(grilla,sapply(grilla,g,2),col='green',type='l')
points(grilla,sapply(grilla,g,-2),col='magenta',type='l')
pi
grilla=seq(-10,10,0.01)
f=function(t,c){
tan(t+c*pi)
}
plot(grilla,sapply(grilla,f,0),col='red',type='l')
points(grilla,sapply(grilla,f,1),col='blue',type='l')
points(grilla,sapply(grilla,f,2),col='green',type='l')
points(grilla,sapply(grilla,f,-2),col='magenta',type='l')
plot(grilla,sapply(grilla,f,0),col='red',type='l')
grilla=seq(-10,10,0.01)
f=function(t,c){
tan(t+c*pi)
}
plot(grilla,sapply(grilla,f,0),col='red',type='l')
points(grilla,sapply(grilla,f,1),col='blue',type='l')
grilla=seq(-10,10,0.01)
f=function(t,c){
t^(1/c)
}
plot(grilla,sapply(grilla,f,1),col='red',type='l')
points(grilla,sapply(grilla,f,2),col='blue',type='l')
points(grilla,sapply(grilla,f,3),col='green',type='l')
points(grilla,sapply(grilla,f,4),col='magenta',type='l')
setwd("~/Escritorio/1er Cuatri/Ciencia de Datos con R: Fundamentos Estadisticos/PrÃ¡cticas/Guia 11/Resolucion guia 11 clase")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
p_A=0.9
p_R=0.1
p_5_dado_A=choose(8,5)*0.3^5*0.7^3
probas_A=c()
for(i in (0:8)){
probas_A=c(probas_A,choose(8,i)*0.3^i*0.7^(8-i))
}
barplot(probas_A, names.arg = (0:8),
xlab='Cantidad de huevos removidos',
ylab='Probabilidad X=x dado aceptadora',col='blue',
main='P(X=x|Y=0)')
p_5_dado_R=choose(8,5)*0.8^5*0.2^3
probas_R=c()
for(i in (0:8)){
probas_R=c(probas_R,choose(8,i)*0.8^i*0.2^(8-i))
}
barplot(probas_R, names.arg = (0:8),
xlab='Cantidad de huevos removidos dado rechazadora',
ylab='Probabilidad X=x dado rechazadora',col='red',
main='P(X=x|Y=1)')
p_5=p_5_dado_A*p_A+p_5_dado_R*p_R
p_5
probas_x=c()
for(i in (0:8)){
probas_x=c(probas_x,choose(8,i)*(0.3^i*0.7^(8-i)*p_A+0.8^i*0.2^(8-i)*p_R))
}
barplot(probas_x, names.arg = (0:8),
xlab='Cantidad de huevos removidos',
ylab='Probabilidad X=x',col='magenta',
main='P(X=x)')
probas_conjunta_x_R=probas_conjunta_x_A=c()
for(x in (0:8)){
proba_x_dado_R=choose(8,x)*0.8^x*0.2^(8-x)
proba_x_dado_A=choose(8,x)*0.3^x*0.7^(8-x)
probas_conjunta_x_A=c(probas_conjunta_x_A,proba_x_dado_A*p_A)
probas_conjunta_x_R=c(probas_conjunta_x_R,proba_x_dado_R*p_R)
}
datos_probas=rbind(cbind(probas_conjunta_x_A,probas_conjunta_x_R,probas_x),c(p_A,p_R,NA))
colnames(datos_probas)=c((0:8),'pY')
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
p_A=0.9
p_R=0.1
p_5_dado_A=choose(8,5)*0.3^5*0.7^3
probas_A=c()
for(i in (0:8)){
probas_A=c(probas_A,choose(8,i)*0.3^i*0.7^(8-i))
}
barplot(probas_A, names.arg = (0:8),
xlab='Cantidad de huevos removidos',
ylab='Probabilidad X=x dado aceptadora',col='blue',
main='P(X=x|Y=0)')
p_5_dado_R=choose(8,5)*0.8^5*0.2^3
probas_R=c()
for(i in (0:8)){
probas_R=c(probas_R,choose(8,i)*0.8^i*0.2^(8-i))
}
barplot(probas_R, names.arg = (0:8),
xlab='Cantidad de huevos removidos dado rechazadora',
ylab='Probabilidad X=x dado rechazadora',col='red',
main='P(X=x|Y=1)')
p_5=p_5_dado_A*p_A+p_5_dado_R*p_R
p_5
probas_x=c()
for(i in (0:8)){
probas_x=c(probas_x,choose(8,i)*(0.3^i*0.7^(8-i)*p_A+0.8^i*0.2^(8-i)*p_R))
}
barplot(probas_x, names.arg = (0:8),
xlab='Cantidad de huevos removidos',
ylab='Probabilidad X=x',col='magenta',
main='P(X=x)')
probas_conjunta_x_R=probas_conjunta_x_A=c()
for(x in (0:8)){
proba_x_dado_R=choose(8,x)*0.8^x*0.2^(8-x)
proba_x_dado_A=choose(8,x)*0.3^x*0.7^(8-x)
probas_conjunta_x_A=c(probas_conjunta_x_A,proba_x_dado_A*p_A)
probas_conjunta_x_R=c(probas_conjunta_x_R,proba_x_dado_R*p_R)
}
tabla_conjunta=data.frame(rbind(cbind('Y=0'=probas_conjunta_x_A,'Y=1'=probas_conjunta_x_R,'p_X'=probas_x),c(p_A,p_R,NA)),row.names = c((0:8),'p_Y'))
#Esta es una forma de pegarle a una tabla una fila rbind(cbind(),c()),
#el vector tiene que tener la misma longitud que cada fila de cbind().
tabla_conjunta
depredados=read.csv('depredadosclasificadas.csv',header = TRUE)
depredados_2=read.csv('depredadosclasificadas_2.csv',header = TRUE)
attach(depredados)
proporcion_Y_A=sum(Y==0)/length(Y)
proporcion_Y_A
proporcion_X_5_MAL=sum(X==5 & Y==0)/length(X)
# Este estÃ¡ mal porque el espacio muestral no es todo S sino S dado Y=0!
proporcion_X_5=sum(X==5 & Y==0)/length(X[Y==0])
# otra forma
mean(X[Y==0]==5)
probas_A_estimadas=c()
for(i in (0:8)){
probas_A_estimadas=c(probas_A_estimadas,sum(X==i & Y==0)/length(X[Y==0]))
}
barplot(c(probas_A,probas_A_estimadas),col = rep(c("blue","red"),each=9))
probas_R_estimadas=c()
for(i in (0:8)){
probas_R_estimadas=c(probas_R_estimadas,sum(X==i & Y==1)/length(X[Y==1]))
}
barplot(c(probas_R,probas_R_estimadas),col = rep(c("blue","red"),each=9))
probas_A_estimadas=format(round(probas_A_estimadas, 2), nsmall = 2)
probas_R_estimadas=format(round(probas_R_estimadas, 2), nsmall = 2)
# Nos quedamos con 2 decimales.
datos_frecuencias=matrix(c(cbind(probas_A_estimadas,probas_R_estimadas)),ncol=9,byrow = TRUE)
colnames(datos_frecuencias)=c((0:8))
rownames(datos_frecuencias)=c('y=0','y=1')
tabla_frec_estimadas=data.frame(datos_frecuencias)
tabla_frec_estimadas
tabla_conjunta=transpose(tabla_conjunta)
require(data.table)
# llamo a la libreria data.table para usar el comando transpose()
tabla_conjunta=transpose(tabla_conjunta)
tabla_conjunta
?transpose
tabla_conjunta=data.frame(rbind(cbind('Y=0'=probas_conjunta_x_A,'Y=1'=probas_conjunta_x_R,'p_X'=probas_x),c(p_A,p_R,NA)),row.names = c((0:8),'p_Y'))
#Esta es una forma de pegarle a una tabla una fila rbind(cbind(),c()),
#el vector tiene que tener la misma longitud que cada fila de cbind().
require(data.table)
# llamo a la libreria data.table para usar el comando transpose()
tabla_conjunta_2=transpose(tabla_conjunta,keep.names = )
tabla_conjunta
tabla_conjunta_2
transpose(tabla_conjunta)
transpose(tabla_conjunta,keep.names=(0:8))
transpose(tabla_conjunta,keep.names='col')
tabla_conjunta_2=data.frame(cbind(rbind('Y=0'=probas_conjunta_x_A,'Y=1'=probas_conjunta_x_R,'p_X'=probas_x),c(p_A,p_R,NA)),row.names = c((0:8),'p_Y'))
tabla_conjunta_2=data.frame(cbind(rbind('Y=0'=probas_conjunta_x_A,'Y=1'=probas_conjunta_x_R,'p_X'=probas_x),c(p_A,p_R,NA)))
names(tabla_conjunta_2)=c((0:8),'p_Y')
tabla_conjunta_2
View(depredados_2)
?read.csv
depredados_2=read.csv('depredadosclasificadas_2.csv',sep=' ',header = TRUE)
View(depredados_2)
knitr::opts_chunk$set(echo = TRUE)
data.table(rbind(c(0.0519,0.1779,0.2668,0.2287,0.1225,0.0420,0.0090,0.0011,0.0001),c(0,0,0.0001,0.0009,0.0046,0.0147,0.0294,0.0336,0.0168)))
tabla=data.table(rbind(c(0.0519,0.1779,0.2668,0.2287,0.1225,0.0420,0.0090,0.0011,0.0001),c(0,0,0.0001,0.0009,0.0046,0.0147,0.0294,0.0336,0.0168)))
names(tabla)
tabla=data.table(rbind('Y=0'=c(0.0519,0.1779,0.2668,0.2287,0.1225,0.0420,0.0090,0.0011,0.0001),'Y=1'=c(0,0,0.0001,0.0009,0.0046,0.0147,0.0294,0.0336,0.0168)))
names(tabla)=(0:8)
tabla=data.table(rbind('Y=0'=c(0.0519,0.1779,0.2668,0.2287,0.1225,0.0420,0.0090,0.0011,0.0001),'Y=1'=c(0,0,0.0001,0.0009,0.0046,0.0147,0.0294,0.0336,0.0168)))
names(tabla)=as.character((0:8))
tabla
tabla=data.table(rbind('Y_0'=c(0.0519,0.1779,0.2668,0.2287,0.1225,0.0420,0.0090,0.0011,0.0001),'Y_1'=c(0,0,0.0001,0.0009,0.0046,0.0147,0.0294,0.0336,0.0168)))
names(tabla)=as.character((0:8))
tabla
?data.table
?data.table
tabla=data.table(rbind('Y_0'=c(0.0519,0.1779,0.2668,0.2287,0.1225,0.0420,0.0090,0.0011,0.0001),'Y_1'=c(0,0,0.0001,0.0009,0.0046,0.0147,0.0294,0.0336,0.0168)),row.names((0:8)))
tabla
tabla=data.table(c('Y=0','Y=1')=rbind('Y_0'=c(0.0519,0.1779,0.2668,0.2287,0.1225,0.0420,0.0090,0.0011,0.0001),'Y_1'=c(0,0,0.0001,0.0009,0.0046,0.0147,0.0294,0.0336,0.0168)))
tabla=data.frame(rbind('Y_0'=c(0.0519,0.1779,0.2668,0.2287,0.1225,0.0420,0.0090,0.0011,0.0001),'Y_1'=c(0,0,0.0001,0.0009,0.0046,0.0147,0.0294,0.0336,0.0168)))
names(tabla)=(0:8)
tabla
tabla=data.frame(rbind('Y=0'=c(0.0519,0.1779,0.2668,0.2287,0.1225,0.0420,0.0090,0.0011,0.0001),'Y=1'=c(0,0,0.0001,0.0009,0.0046,0.0147,0.0294,0.0336,0.0168)))
names(tabla)=(0:8)
tabla
sum(tabla[1,])
sum(tabla[2,])
sum(tabla[2,])
tabla[1,0]
tabla[1,1]
tabla[1,0]
tabla[1,'0']
i=1
'i'
'get(i)'
as.character(1)
p_XY=function(x,y){
tabla[y+1,x+1]
# otra forma: tabla[y+1,as.character(x)]
# porque el nombre de c/col es el valor de x
}
error=1
for(x in (0:8)){
error=error-p_XY(x,g(x))
}
g=function(x){
if(x<=3){0}else{1}
}
p_XY=function(x,y){
tabla[y+1,x+1]
# otra forma: tabla[y+1,as.character(x)]
# porque el nombre de c/col es el valor de x
}
error=1
for(x in (0:8)){
error=error-p_XY(x,g(x))
}
depredados=read.csv('depredadosclasificadas.csv',sep=' ',header = TRUE)
X=depredados$removidos
Y=depredados$especie
error_empÃ­rico=mean(g(X)!=Y)
X
Y
g(X)
error_empÃ­rico=mean(lapply(X,g)!=Y)
error_empÃ­rico
abs(error_medio-error_empirico)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
tabla=data.frame(rbind(
'Y=0'=c(0.0519,0.1779,0.2668,0.2287,0.1225,0.0420,0.0090,0.0011,0.0001),
'Y=1'=c(0,0,0.0001,0.0009,0.0046,0.0147,0.0294,0.0336,0.0168)))
names(tabla)=(0:8)
tabla
g=function(x){
if(x<=3){0}else{1}
}
p_XY=function(x,y){
tabla[y+1,x+1]
# otra forma: tabla[y+1,as.character(x)]
# porque el nombre de c/col es el valor de x
}
error_medio=1
for(x in (0:8)){
error_medio=error_medio-p_XY(x,g(x))
}
error_medio
depredados=read.csv('depredadosclasificadas.csv',sep=' ',header = TRUE)
# le tengo que poner sep=' ' para que entienda que tiene que las columnas
# estÃ¡n divididas por un espacio.
X=depredados$removidos
Y=depredados$especie
error_empÃ­rico=mean(lapply(X,g)!=Y)
abs(error_medio-error_empirico)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
tabla=data.frame(rbind(
'Y=0'=c(0.0519,0.1779,0.2668,0.2287,0.1225,0.0420,0.0090,0.0011,0.0001),
'Y=1'=c(0,0,0.0001,0.0009,0.0046,0.0147,0.0294,0.0336,0.0168)))
names(tabla)=(0:8)
tabla
g=function(x){
if(x<=3){0}else{1}
}
p_XY=function(x,y){
tabla[y+1,x+1]
# otra forma: tabla[y+1,as.character(x)]
# porque el nombre de c/col es el valor de x
}
error_medio=1
for(x in (0:8)){
error_medio=error_medio-p_XY(x,g(x))
}
error_medio
depredados=read.csv('depredadosclasificadas.csv',sep=' ',header = TRUE)
# le tengo que poner sep=' ' para que entienda que tiene que las columnas
# estÃ¡n divididas por un espacio.
X=depredados$removidos
Y=depredados$especie
error_empirico=mean(lapply(X,g)!=Y)
abs(error_medio-error_empirico)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
tabla=data.frame(rbind(
'Y=0'=c(0.0519,0.1779,0.2668,0.2287,0.1225,0.0420,0.0090,0.0011,0.0001),
'Y=1'=c(0,0,0.0001,0.0009,0.0046,0.0147,0.0294,0.0336,0.0168)))
names(tabla)=(0:8)
tabla
g=function(x){
if(x<=3){0}else{1}
}
p_XY=function(x,y){
tabla[y+1,x+1]
# otra forma: tabla[y+1,as.character(x)]
# porque el nombre de c/col es el valor de x
}
error_medio=1
for(x in (0:8)){
error_medio=error_medio-p_XY(x,g(x))
}
error_medio
depredados=read.csv('depredadosclasificadas.csv',sep=' ',header = TRUE)
# le tengo que poner sep=' ' para que entienda que tiene que las columnas
# estÃ¡n divididas por un espacio.
X=depredados$removidos
Y=depredados$especie
error_empirico=mean(lapply(X,g)!=Y)
error_medio-error_empirico
