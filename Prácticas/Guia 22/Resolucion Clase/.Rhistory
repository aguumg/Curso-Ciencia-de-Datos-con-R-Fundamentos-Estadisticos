estimacion_1=estimacion_2=matrix()
for(i in enes){
muestra=var.gen(i,Nrep,theta)
aux_1=data.frame(apply(muestra,1,est1))
names(aux_1)=paste('est1_',i)
estimacion_1=cbind(estimacion_1,aux_1)
aux_2=data.frame(apply(muestra,1,est2))
names(aux_2)=paste('est2_',i)
estimacion_2=cbind(estimacion_2,aux_2)
# estimaciones=cbind(estimaciones,estimacion_1,estimacion_2)
}
View(muestra)
?apply
ECME=function(n,Nrep,estimador){
theta=3
muestra=var.gen(n,Nrep,theta)
if(estimador==1){
estimacion=apply(muestra,1,est1)
mean((estimacion-theta)^2)
}else if(estimador==2){
estimacion=apply(muestra,1,est2)
mean((estimacion-theta)^2)
}else{'Ingrese un estimador adecuado (1 ó 2)'}
}
## Simulacin 1:.
A lo largo de esta simulacin generaremos variables con distribucin
exponencial de paramtro λ = 0.2.
1.9 Indique cual es el veradero valor que estamos queriendo estimar: θ 0 = P(X > 1),
siendo X ∼ E(0.2).
1.10 Genere una muestras de tamao n=50 y calcule cada uno de los estimadores.
1.11 Genere N rep= 1000 muestras de tamao n=50 y guarde los valores de cada uno
de los dos estimadores calculados en cada uno de los N rep = 1000 conjuntos de
datos.
1.12 Realize un histograma de cada uno de los estimadores propuestos con los val-
ores obtenidos en el item anterior. Comente los gráficos realizados. Indique que
etimador prefiere en este escenario y explique a que atribuye sus bondades.
1.13 Represente en una tabla el error cuadrtico medio (estimado) de los estimadores
θ b n y θ e n para muestras de tamao n=150, n=200, n=500 y n=1000, utilizando
Nrep=1000 replicaciones en cada caso. Qué estimador prefiere bajo este escenario?
knitr::opts_chunk$set(echo = TRUE)
datos_plot=data.frame(datos$f,lapply(datos$f,empirica))
knitr::opts_chunk$set(echo = TRUE)
datos=read.table("GRB_afterglow.dat.csv",header=T, skip=1)
empirica=function(t){
mean(datos$f<t)
}
##############
empirica(40)
ecdf(datos$f)(40)
##############
plot(datos$f,lapply(datos$f,empirica),pch=20)
plot(ecdf(datos$f))
##############
mean(datos$f)
##############
median(datos$f)
##############
sd(datos$f)
##############
library(ggplot2)
ggplot(datos, aes(f))+
geom_histogram(aes(x=f,y=..density..), binwidth=2,alpha=1,
fill="skyblue",color="black")+
geom_density(aes(x=f))
par(mfrow=c(1,2))
hist(datos$f,freq=F)
plot(density(datos$f))
par(mfrow=c(1,1))
par(mfrow=c(1,2))
hist(datos$f,freq=F)
hist(stat(datos$f)/length(datos$f),freq=F)
par(mfrow=c(1,1))
EMV=function(datos){
1/mean(datos)
}
F_X=function(t,lambda){
1-exp(-lambda*t)
}
F_X(40,EMV(datos$f))
##############
empirica(40)
ecdf(datos$f)(40)
datos_plot=data.frame(datos$f,lapply(datos$f,empirica))
plot(datos$f,lapply(datos$f,empirica),pch=20)
View(datos_plot)
datos_plot=data.frame('flux'=datos$f,'empirica'=lapply(datos$f,empirica))
datos_plot=data.frame(cbind('flux'=datos$f,'empirica'=lapply(datos$f,empirica)))
ggplot(datos_plot)+
geom_line(aes(x=flux,y=empirica),color='blue')
datos_plot$empirica[1]
apply(datos$f,1,empirica)
apply(datos$f,2,empirica)
datos$f
empirica(datos$f)
sapply(datos$f,empirica)
datos_plot=data.frame(cbind('flux'=datos$f,'empirica'=sapply(datos$f,empirica)))
ggplot(datos_plot)+
geom_line(aes(x=flux,y=empirica),color='blue')
ggplot()+
geom_line(datos_plot,aes(x=flux,y=empirica),color='blue')
datos_plot=data.frame(cbind('flux'=datos$f,
'empirica'=sapply(datos$f,empirica),
'acumulada'=sapply(datos$f,F_X,lambda=EMV(datos$f))))
ggplot(datos_plot)+
geom_line(aes(x=flux,y=empirica),color='blue')+
geom_line(aes(x=flux,y=acumulada),color='red')
ggplot(datos_plot)+
geom_line(aes(x=flux,y=empirica,color='empirica'))+
geom_line(aes(x=flux,y=acumulada,color='acumulada'))+
scale_colour_manual("",
breaks = c("empirica", "acumulada"),
values = c("blue", "red")) +
xlab("flux") +
scale_y_continuous("P(X<t)") +
labs(title="Empirica(t) vs Acumulada(t,EMV)")
ggplot(datos, aes(f))+
geom_histogram(aes(x=f,y=..density..), binwidth=2,alpha=1,
fill="skyblue",color="black")+
geom_density(aes(x=f))
ggplot(datos)+
geom_histogram(aes(x=f,y=..density..), binwidth=2,alpha=1,
fill="skyblue",color="black")+
geom_density(aes(x=f))
f_X=function(x,lambda){
lambda*exp(-lambda*x)*ifelse(x>=0,1,0)
}
datos_plot=data.frame(cbind(datos_plot,'densidad'=sapply(datos$f,f_X,lambda=EMV(datos$f))))
ggplot(datos_plot)+
geom_histogram(aes(x=flux,y=..density..), binwidth=2,alpha=1,
fill="skyblue",color="black")+
geom_line(aes(x=flux,y=densidad),color='red')
ggplot(datos_plot)+
geom_histogram(aes(x=flux,y=..density../63), binwidth=2,alpha=1,
fill="skyblue",color="black")+
geom_line(aes(x=flux,y=densidad),color='red')
ggplot(datos_plot)+
geom_histogram(aes(x=flux,y=..density..), binwidth=2,alpha=1,
fill="skyblue",color="black")+
geom_line(aes(x=flux,y=densidad),color='red')
ggplot(datos_plot)+
geom_histogram(aes(x=flux,y=..density..), binwidth=5,alpha=1,
fill="skyblue",color="black")+
geom_line(aes(x=flux,y=densidad),color='red')
?hist
hist(stat(datos$f)/length(datos$f),freq=F)
hist(stat(datos$f)/length(datos$f),freq=F)$bin
hist(stat(datos$f)/length(datos$f),freq=F)$breaks
ggplot(datos_plot)+
geom_histogram(aes(x=flux,y=..density..),
breaks=hist(stat(datos$f)/length(datos$f),freq=F)$breaks,
# le paso los breaks del otro hist
alpha=1,
fill="skyblue",color="black")+
geom_line(aes(x=flux,y=densidad),color='red')
hist(stat(datos$f)/length(datos$f),freq=F)$breaks
a=hist(stat(datos$f)/length(datos$f),freq=F)$breaks
a
ggplot(datos_plot)+
geom_histogram(aes(x=flux,y=..density..),
breaks=a,
# le paso los breaks del otro hist
alpha=1,
fill="skyblue",color="black")+
geom_line(aes(x=flux,y=densidad),color='red')
ggplot(datos_plot)+
geom_histogram(aes(x=flux,y=..density..),
breaks=a,
# le paso los breaks del otro hist
alpha=1,
fill="skyblue",color="black")+
geom_line(aes(x=flux,y=densidad),color='red')
a=hist(stat(datos$f)/length(datos$f),freq=F)$breaks
ggplot(datos_plot)+
geom_histogram(aes(x=flux,y=..density..),
breaks=a,fill="skyblue",color="black")+
geom_line(aes(x=flux,y=densidad),color='red')
ggplot(datos_plot)+
geom_histogram(aes(x=flux,y=..density..),
breaks=9,fill="skyblue",color="black")+
geom_line(aes(x=flux,y=densidad),color='red')
?geom_histogram
ggplot(datos_plot)+
geom_histogram(aes(x=flux,y=..density..),
bins=9,fill="skyblue",color="black")+
geom_line(aes(x=flux,y=densidad),color='red')
a=hist(stat(datos$f)/length(datos$f),freq=F)$breaks
ggplot(datos_plot)+
geom_histogram(aes(x=flux,y=..density..),
bins=9,fill="skyblue",color="black")+
geom_line(aes(x=flux,y=densidad),color='red')
a=hist(stat(datos$f)/length(datos$f),freq=F)$breaks
ggplot(datos_plot)+
geom_histogram(aes(x=flux,y=..density..),
bins=8,fill="skyblue",color="black")+
geom_line(aes(x=flux,y=densidad),color='red')
ggplot(datos_plot)+
geom_histogram(aes(x=flux,y=..density..),
bins=10,fill="skyblue",color="black")+
geom_line(aes(x=flux,y=densidad),color='red')
ggplot(datos_plot)+
geom_histogram(aes(x=flux,y=..density..),
fill="skyblue",color="black")+
geom_line(aes(x=flux,y=densidad),color='red')
ggplot(datos_plot)+
geom_histogram(aes(x=flux,y=..density..), binwidth=3
fill="skyblue",color="black")+
ggplot(datos_plot)+
geom_histogram(aes(x=flux,y=..density..), binwidth=3,
fill="skyblue",color="black")+
geom_line(aes(x=flux,y=densidad),color='red')
ggplot(datos_plot)+
geom_histogram(aes(x=flux,y=..density..), binwidth=5,
fill="skyblue",color="black")+
geom_line(aes(x=flux,y=densidad),color='red')
ggplot(datos_plot)+
geom_histogram(aes(x=flux,y=..density..), binwidth=6,
fill="skyblue",color="black")+
geom_line(aes(x=flux,y=densidad),color='red')
ggplot(datos_plot)+
geom_histogram(aes(x=flux,y=..density..), binwidth=7,
fill="skyblue",color="black")+
geom_line(aes(x=flux,y=densidad),color='red')
qexp(0.5, rate = EMV(datos$f), lower.tail = TRUE, log.p = FALSE)
1/EMV(datos$f)
mean(datos$f)
devtools::install_github("AckerDWM/gg3D")
library("gg3D")
## An empty plot with 3 axes
qplot(x=0, y=0, z=0, geom="blank") +
theme_void() +
axes_3D()
f=function(x,y){
-1/3*(x^2+y)^2+x^2*(x^2+y)-x^4/5
}
grilla_x=seq(-5,5,0.01)
grilla_y=seq(-5,5,0.01)
grilla_z=sapply(c(rbind(grilla_x,grilla_y)),f)
grilla_z=mapply(f,grilla_x,grilla_y)
-1/3*(5^2+-5)^2+5^2*(5^2+-5)-5^4/5
qplot(x=grilla_x, y=grilla_y, z=grilla_z, geom="blank") +
theme_void() +
axes_3D()
?gg3D
??gg3D
data(iris)
ggplot(iris, aes(x=Petal.Width, y=Sepal.Width, z=Petal.Length, color=Species)) +
theme_void() +
axes_3D() +
stat_3D()
datos_plot=data.frame(cbind(grilla_x,grilla_y,grilla_z))
View(datos_plot)
ggplot(datos_plot,aes(x=grilla_x, y=grilla_y, z=grilla_z)) +
theme_void() +
axes_3D()+
stat_3D()
ggplot(datos_plot,aes(x=grilla_x, y=grilla_y, z=grilla_z)) +
theme_void() +
axes_3D()+
stat_3D(geom='path')
ggplot(datos_plot,aes(x=grilla_x, y=grilla_y, z=grilla_z)) +
theme_void() +
axes_3D(theta=30, phi=20) +
stat_3D(theta=30, phi=20, geom="path") +
theme(legend.position = "none")
ggplot(datos_plot,aes(x=grilla_x, y=grilla_y, z=grilla_z),color='red') +
theme_void() +
axes_3D(theta=30, phi=20) +
stat_3D(theta=30, phi=20, geom="path") +
theme(legend.position = "none")
ggplot(datos_plot,aes(x=grilla_x, y=grilla_y, z=grilla_z,color='red')) +
theme_void() +
axes_3D(theta=30, phi=20) +
stat_3D(theta=30, phi=20, geom="path") +
theme(legend.position = "none")
ggplot(datos_plot,aes(x=grilla_x, y=grilla_y, z=grilla_z,color='red')) +
axes_3D() +
stat_wireframe(alpha=.5) +
stat_3D(aes(color=value), alpha=.5) +
theme_void() +
theme(legend.position = "none")
ggplot(datos_plot,aes(x=grilla_x, y=grilla_y, z=grilla_z)) +
axes_3D() +
stat_wireframe(alpha=.5) +
stat_3D(aes(color=grilla_z), alpha=.5) +
theme_void() +
theme(legend.position = "none")
ggplot(datos_plot,aes(x=grilla_x, y=grilla_y, z=grilla_z)) +
axes_3D() +
stat_wireframe(alpha=.5) +
stat_3D(aes(color=grilla_z), alpha=.5) +
theme_void() +
theme(legend.position = "none")+
scale_color_gradientn(colors=plot3D::jet2.col()) +
labs_3D(hjust=c(0,1,1), vjust=c(1, 1, -0.2), angle=c(0, 0, 90))
ggplot(datos_plot,aes(x=grilla_x, y=grilla_y, z=grilla_z)) +
axes_3D(theta=30) +
stat_wireframe(alpha=.5) +
stat_3D(aes(color=grilla_z), alpha=.5,theta=30) +
theme_void() +
theme(legend.position = "none")+
scale_color_gradientn(colors=plot3D::jet2.col()) +
labs_3D(hjust=c(0,1,1), vjust=c(1, 1, -0.2), angle=c(0, 0, 90))
ggplot(datos_plot,aes(x=grilla_x, y=grilla_y, z=grilla_z)) +
axes_3D(theta=100) +
stat_wireframe(alpha=.5) +
stat_3D(aes(color=grilla_z), alpha=.5,theta=100) +
theme_void() +
theme(legend.position = "none")+
scale_color_gradientn(colors=plot3D::jet2.col()) +
labs_3D(hjust=c(0,1,1), vjust=c(1, 1, -0.2), angle=c(0, 0, 90))
a=c(1,2)
b=c(3,4)
c(1,3,1,4,2,3,2,4)
c(a,b)
expand.grid(list(c(1,2),c(3,4)))
cbind(expand.grid(list(c(1,2),c(3,4))))
stack(expand.grid(list(c(1,2),c(3,4))))
stack(expand.grid(list(c(1,2),c(3,4))))[1]
library(tidyr)
crossing(c(1,2),c(3,4))
a=expand.grid(list(c(1,2),c(3,4)))
a
a[1,]
a[1,][1]
a[1,]
as.vector(a[1,])
a[1,]
c(a[1,],a[2,])
get(a[1,])
a[1,]
as.list(a[1,])
as.array(a[1,])
as.vector(a[1,])
a[1,]+a[2,]
argumento_f=expand.grid(list(grilla_x,grilla_y))
View(argumento_f)
argumento_f
mapply(f,argumento_f)
apply(argumento_f,1,f)
mapply(argumento_f,f)
mapply(f,argumento_f[,1],argumento_f[,2])
argumento_f=expand.grid(list(grilla_x,grilla_y))
grilla_z=mapply(f,argumento_f[,1],argumento_f[,2])
datos_plot=data.frame(cbind(grilla_x,grilla_y,grilla_z))
View(argumento_f)
View(datos_plot)
length(grilla_x)
length(grilla_z)
length(grilla_x)^2
datos_plot=data.frame(cbind(argumento_f[,1],argumento_f[,2],grilla_z))
datos_plot=data.frame(cbind('eje_x'=argumento_f[,1],
'eje_y'=argumento_f[,2],
'eje_z'=grilla_z))
ggplot(datos_plot,aes(x=eje_x, y=eje_y, z=eje_z)) +
axes_3D(theta=100) +
stat_wireframe(alpha=.5) +
stat_3D(aes(color=grilla_z), alpha=.5,theta=100) +
theme_void() +
theme(legend.position = "none")+
scale_color_gradientn(colors=plot3D::jet2.col()) +
labs_3D(hjust=c(0,1,1), vjust=c(1, 1, -0.2), angle=c(0, 0, 90))
ggplot(datos_plot,aes(x=eje_x, y=eje_y, z=eje_z)) +
axes_3D(theta=100) +
stat_wireframe(alpha=.5) +
stat_3D(aes(color=eje_z), alpha=.5,theta=100) +
theme_void() +
theme(legend.position = "none")+
scale_color_gradientn(colors=plot3D::jet2.col()) +
labs_3D(hjust=c(0,1,1), vjust=c(1, 1, -0.2), angle=c(0, 0, 90))
grilla_x=seq(-5,5,0.1)
grilla_y=seq(-5,5,0.1)
argumento_f=expand.grid(list(grilla_x,grilla_y))
grilla_z=mapply(f,argumento_f[,1],argumento_f[,2])
datos_plot=data.frame(cbind('eje_x'=argumento_f[,1],
'eje_y'=argumento_f[,2],
'eje_z'=grilla_z))
ggplot(datos_plot,aes(x=eje_x, y=eje_y, z=eje_z)) +
axes_3D(theta=100) +
stat_wireframe(alpha=.5) +
stat_3D(aes(color=eje_z), alpha=.5,theta=100) +
theme_void() +
theme(legend.position = "none")+
scale_color_gradientn(colors=plot3D::jet2.col()) +
labs_3D(hjust=c(0,1,1), vjust=c(1, 1, -0.2), angle=c(0, 0, 90))
ggplot(datos_plot,aes(x=eje_x, y=eje_y, z=eje_z)) +
axes_3D() +
# stat_wireframe(alpha=.5) +
stat_3D(aes(color=eje_z), alpha=.5) +
theme_void() +
theme(legend.position = "none")+
scale_color_gradientn(colors=plot3D::jet2.col()) +
labs_3D(hjust=c(0,1,1), vjust=c(1, 1, -0.2), angle=c(0, 0, 90))
ggplot(datos_plot,aes(x=eje_x, y=eje_y, z=eje_z)) +
axes_3D() +
# stat_wireframe(alpha=.5) +
stat_3D(alpha=.5) +
theme_void() +
theme(legend.position = "none")+
scale_color_gradientn(colors=plot3D::jet2.col()) +
labs_3D(hjust=c(0,1,1), vjust=c(1, 1, -0.2), angle=c(0, 0, 90))
ggplot(datos_plot,aes(x=eje_x, y=eje_y, z=eje_z)) +
axes_3D() +
# stat_wireframe(alpha=.5) +
stat_3D(aes(color=eje_z), alpha=.5) +
theme_void() +
theme(legend.position = "none")+
scale_color_gradientn(colors=plot3D::jet2.col()) +
labs_3D(hjust=c(0,1,1), vjust=c(1, 1, -0.2), angle=c(0, 0, 90))
bootstrap percentil:
setwd("~/Escritorio/1er Cuatri/Ciencia de Datos con R_ Fundamentos Estadisticos/Prácticas/Guia 22/Resolucion Clase")
knitr::opts_chunk$set(echo = TRUE)
datos=read.csv('datos.csv',header=TRUE)
hist(datos)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(ggplot2)
library(tidyr)
library(gganimate)
datos=read.csv('datos.csv',header=TRUE)
hist(datos)
View(datos)
hist(datos$x
hist(datos$x)
hist(datos$x)
?hist
t(echo = TRUE)
hist(datos$x,freq=F)
hist(datos$x,freq=F,
breaks=c(min(datos$x),max(datos$x)),
nclass=5)
?seq
hist(datos$x,freq=F,
breaks=seq(min(datos$x),max(datos$x),5))
seq(min(datos$x),max(datos$x))
seq(min(datos$x),max(datos$x),5)
seq(min(datos$x),max(datos$x),length.out=5)
hist(datos$x,freq=F,
breaks=seq(min(datos$x),max(datos$x),length.out=5))
hist(datos$x,freq=F,
breaks=seq(min(datos$x),max(datos$x),length.out=20))
par(mfrow=c(1,3))
hist(datos$x,freq=F)
hist(datos$x,freq=F,
breaks=seq(min(datos$x),max(datos$x),length.out=5))
hist(datos$x,freq=F,
breaks=seq(min(datos$x),max(datos$x),length.out=20))
pas(mfrow=c(1,1))
par(mfrow=c(1,3))
hist(datos$x,freq=F)
hist(datos$x,freq=F,
breaks=seq(min(datos$x),max(datos$x),length.out=5))
hist(datos$x,freq=F,
breaks=seq(min(datos$x),max(datos$x),length.out=20))
par(mfrow=c(1,1))
hist(datos$x,freq=F,
breaks=seq(min(datos$x)-2,max(datos$x)+2,length.out=10)+1)
seq(min(datos$x)-2,max(datos$x)+2,length.out=10)
seq(min(datos$x)-2,max(datos$x)+2,length.out=10)+1
densidad.est.parzen=function(datos,h,z){
c=(z-datos)/h
mean(-1<= c & c<= 1)/(2*h)
}
densidad.est.parzen(datos$x,1,20)
densidad.est.parzen=function(datos,h,z){
c=(z-datos)/h
K=(-1<= c & c<= 1)/2
mean(K)/h
}
densidad.est.parzen(datos$x,1,20)
densidad.est.parzen(datos$x,1,20)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(ggplot2)
library(tidyr)
library(gganimate)
datos=read.csv('datos.csv',header=TRUE)
hist(datos$x,freq=F)
hist(datos$x,freq=F,
breaks=seq(min(datos$x),max(datos$x),length.out=5))
hist(datos$x,freq=F,
breaks=seq(min(datos$x),max(datos$x),length.out=20))
par(mfrow=c(1,3))
hist(datos$x,freq=F)
hist(datos$x,freq=F,
breaks=seq(min(datos$x),max(datos$x),length.out=5))
hist(datos$x,freq=F,
breaks=seq(min(datos$x),max(datos$x),length.out=20))
par(mfrow=c(1,1))
hist(datos$x,freq=F,
breaks=seq(min(datos$x)-2,max(datos$x)+2,length.out=10))
hist(datos$x,freq=F,
breaks=seq(min(datos$x)-2,max(datos$x)+2,length.out=10)+1)
hist(datos$x,freq=F,
breaks=seq(min(datos$x)-2,max(datos$x)+2,length.out=10)+1+1)
par(mfrow=c(1,3))
hist(datos$x,freq=F,
breaks=seq(min(datos$x)-2,max(datos$x)+2,length.out=10))
hist(datos$x,freq=F,
breaks=seq(min(datos$x)-2,max(datos$x)+2,length.out=10)+1)
hist(datos$x,freq=F,
breaks=seq(min(datos$x)-2,max(datos$x)+2,length.out=10)+1+1)
par(mfrow=c(1,1))
K_unif=function(datos,h,z){
(-1<= (z-datos)/h & (z-datos)/h<= 1)/2
}
densidad.est.parzen=function(datos,h,z){
mean(K_unif(datos,h,z))/h
}^
densidad.est.parzen=function(datos,h,z){
mean(K_unif(datos,h,z))/h
}
densidad.est.parzen(datos$x,1,20)
