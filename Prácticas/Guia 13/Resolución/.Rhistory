dnorm(x,media_M,desvio_M)
}
media_F=mean(altura[genero=='F'])
desvio_F=sd(altura[genero=='F'])
f_1=function(x){
dnorm(x,media_F,desvio_F)
}
f_0(175)
f_0(180)
clasificador_op=function(xNuevo){
proporcion_F=mean(genero=='F')
proporcion_M=1-proporcion_F
if(f_1(x)*proporcion_F>f_0(x)proporcion_M)
clasificador_op=function(xNuevo){
proporcion_F=mean(genero=='F')
proporcion_M=1-proporcion_F
if(f_1(xNuevo)*proporcion_F>f_0(xNuevo)*proporcion_M)
{sprintf('yNuevo=%s',1)}else
{sprintf('yNuevo=%s',0)}
}
clasificador_op(165)
clasificador_op(175)
clasificador_op=function(xNuevo){
proporcion_F=mean(genero=='F')
proporcion_M=1-proporcion_F
if(f_1(xNuevo)*proporcion_F>f_0(xNuevo)*proporcion_M)
{sprintf('yNuevo=%s, es decir, el nuevo individuo se clasifica como F',1)}else
{sprintf('yNuevo=%s, es decir, el nuevo individuo se clasifica como M',0)}
}
clasificador_op(165)
clasificador_op(175)
ClasificoGenerativo=function(X, Y, xNuevo){
proporcion_1=mean(Y==1)
proporcion_0=1-proporcion_1
if(f_1(xNuevo)*proporcion_1>f_0(xNuevo)*proporcion_0)
{sprintf('yNuevo=%s',1)}else
{sprintf('yNuevo=%s',0)}
}
alturas_testeo=read.csv('alturas.testeo.csv')
View(alturas_testeo)
ClasificoVecinos_test=function(xNuevo){
ClasificoVecinos(alturas_testeo$altura,alturas_testeo$genero,xNuevo,10)
}
ClasificoMovil_test=function(xNuevo){
ClasificoMovil(alturas_testeo$altura,alturas_testeo$genero,xNuevo,1.5)
}
ClasificoGenerativo_test=function(xNuevo){
ClasificoGenerativo(alturas_testeo$altura,alturas_testeo$genero,xNuevo)
}
error_empirico_vecinos=mean(lapply(alturas_testeo$altura,ClasificoVecinos_test)
!=alturas_testeo$genero)
error_empirico_vecinos
error_empirico_ventana=mean(lapply(alturas_testeo$altura,ClasificoMovil_test)
!=alturas_testeo$genero)
error_empirico_ventana
error_empirico_op=mean(lapply(alturas_testeo$altura,ClasificoGenerativo_test)
!=alturas_testeo$genero)
error_empirico_op
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
alturas=read.csv('alturas_n_500.csv')
attach(alturas)
hist(altura,col=rep(c('red','blue'),each=18),
freq=F,
main='Altura vs genero',
xlab='Altura',
ylab='Frecuencia',
nclass=30)
legend("bottomright",
c("F","M"),
fill=c("red","blue") )
plot(genero,altura,col=c('red','blue'))
k_posiciones_cercanas=function(xCentro,k){
distancias=abs(altura-xCentro)
posiciones=c()
for(i in (1:k)){
menor_distancia=which.min(distancias)
posiciones=c(posiciones,menor_distancia)
distancias[menor_distancia]=1
# Le pongo un 1 al lugar de la menor distancia, asi en la
# proxima iteracion la menor distancia cambia.
}
posiciones
}
k_vecinos_cercanos=function(xCentro,k){
datos=altura-xCentro
altura_aux=altura
vecinos=c()
for(i in (1:10)){
menor_distancia=which.min(abs(datos))
vecinos=c(vecinos,altura_aux[menor_distancia])
datos=datos[!datos %in% datos[menor_distancia]]
altura_aux=altura_aux[!altura_aux %in% altura_aux[menor_distancia]]
}
vecinos
}
# Una forma
proporcion_F=mean(genero[altura %in% k_vecinos_cercanos(165,10)]=='F')
proporcion_F
# Otra forma
proporcion_F=mean(genero[k_posiciones_cercanas(165,10)]=='F')
proporcion_F
# Notar que da 2 valores distintos porque en rigor hay 12 valores
# de altura que coinciden con los de k_vecinos_cercanos(165,10)
# en vez de haber 10.
# La forma correcta es la segunda.
if(proporcion_F>=0.5)
{'El género de un individuo con altura 165 se clasifica como F'}else
{'El género de un individuo con altura 165 se clasifica como M'}
proporcion_F=mean(genero[k_posiciones_cercanas(175,10)]=='F')
proporcion_F
if(proporcion_F>=0.5)
{'El género de un individuo con altura 165 se clasifica como F'}else
{'El género de un individuo con altura 165 se clasifica como M'}
clasificador_vecinos=function(xNuevo,k){
proporcion_F=mean(genero[k_posiciones_cercanas(xNuevo,k)]=='F')
proporcion_F
if(proporcion_F>=0.5)
{sprintf('El género de un individuo con altura %s y ventana %s se clasifica como F',xNuevo,k)}else
{sprintf('El género de un individuo con altura %s y ventana %s se clasifica como M',xNuevo,k)}
}
clasificador_ventana=function(xNuevo,ventana){
promedio_F=mean(genero[xNuevo-ventana<=altura
& altura <= xNuevo+ventana]=='F')
if(promedio_F>=0.5)
{sprintf('El género de un individuo con altura %s y ventana %s se clasifica como F',xNuevo,ventana)}else
{sprintf('El género de un individuo con altura %s y ventana %s se clasifica como M',xNuevo,ventana)}
}
clasificador_ventana(165,1.5)
clasificador_ventana(175,1.5)
k_posiciones_cercanas_X=function(X,xCentro,k){
distancias=abs(X-xCentro)
posiciones=c()
for(i in (1:k)){
menor_distancia=which.min(distancias)
posiciones=c(posiciones,menor_distancia)
distancias[menor_distancia]=1
# Le pongo un 1 al lugar de la menor distancia, asi en la
# proxima iteracion la menor distancia cambia.
}
posiciones
}
ClasificoVecinos=function(X, Y, xNuevo, k){
proporcion_F=mean(Y[k_posiciones_cercanas_X(X,xNuevo,k)]=='F')
# Esto se puede generalizar para buscar Y==c para cualquier cte c.
proporcion_F
if(proporcion_F>=0.5)
{'F'}else{'M'}
}
ClasificoMovil=function(X, Y, xNuevo, h){
proporcion_F=mean(Y[xNuevo-h<=X
& X <= xNuevo+h]=='F')
if(proporcion_F>=0.5)
{'F'}else{'M'}
}
media_M=mean(altura[genero=='M'])
desvio_M=sd(altura[genero=='M'])
grilla_M=seq(range(altura[genero=='M'])[1],
range(altura[genero=='M'])[2],length=100)
funn_M=dnorm(grilla_M,media_M,desvio_M)
media_F=mean(altura[genero=='F'])
desvio_F=sd(altura[genero=='F'])
grilla_F=seq(range(altura[genero=='F'])[1],
range(altura[genero=='F'])[2],length=100)
funn_F=dnorm(grilla_F,media_F,desvio_F)
par(mfrow=c(1,2))
hist(altura[genero=='M'],freq=F,main="Histograma de densidad",
nclass=10, col="blue",xlab="Alturas hombres",
xlim=c(150,180), ylim=c(0,0.2))
lines(grilla_M,funn_M,lwd=2)
hist(altura[genero=='F'],freq=F,main="Histograma de densidad",
nclass=10, col="red",xlab="Alturas mujeres",
xlim=c(150,180), ylim=c(0,0.2))
lines(grilla_F,funn_F,lwd=2)
proporcion_F=mean(genero=='F')
proporcion_F
media_M=mean(altura[genero=='M'])
desvio_M=sd(altura[genero=='M'])
f_0=function(x){
dnorm(x,media_M,desvio_M)
}
media_F=mean(altura[genero=='F'])
desvio_F=sd(altura[genero=='F'])
f_1=function(x){
dnorm(x,media_F,desvio_F)
}
clasificador_op=function(xNuevo){
proporcion_F=mean(genero=='F')
proporcion_M=1-proporcion_F
if(f_1(xNuevo)*proporcion_F>f_0(xNuevo)*proporcion_M)
{sprintf('yNuevo=%s, es decir, el nuevo individuo se clasifica como F',1)}else
{sprintf('yNuevo=%s, es decir, el nuevo individuo se clasifica como M',0)}
}
clasificador_op(165)
clasificador_op(175)
ClasificoGenerativo=function(X, Y, xNuevo){
proporcion_F=mean(Y=='F')
proporcion_M=1-proporcion_F
if(f_1(xNuevo)*proporcion_F>f_0(xNuevo)*proporcion_M)
{'F'}else{'M'}
}
alturas_testeo=read.csv('alturas.testeo.csv')
ClasificoVecinos_test=function(xNuevo){
ClasificoVecinos(alturas_testeo$altura,alturas_testeo$genero,xNuevo,10)
}
ClasificoMovil_test=function(xNuevo){
ClasificoMovil(alturas_testeo$altura,alturas_testeo$genero,xNuevo,1.5)
}
ClasificoGenerativo_test=function(xNuevo){
ClasificoGenerativo(alturas_testeo$altura,alturas_testeo$genero,xNuevo)
}
error_empirico_vecinos=mean(lapply(alturas_testeo$altura,ClasificoVecinos_test)
!=alturas_testeo$genero)
error_empirico_vecinos
error_empirico_ventana=mean(lapply(alturas_testeo$altura,ClasificoMovil_test)
!=alturas_testeo$genero)
error_empirico_ventana
error_empirico_op=mean(lapply(alturas_testeo$altura,ClasificoGenerativo_test)
!=alturas_testeo$genero)
error_empirico_op
ClasificoMovil_test=function(xNuevo){
ClasificoMovil(alturas_testeo$altura,alturas_testeo$genero,xNuevo,2.5)
}
ClasificoGenerativo_test=function(xNuevo){
ClasificoGenerativo(alturas_testeo$altura,alturas_testeo$genero,xNuevo)
}
error_empirico_vecinos=mean(lapply(alturas_testeo$altura,ClasificoVecinos_test)
!=alturas_testeo$genero)
error_empirico_vecinos
error_empirico_ventana=mean(lapply(alturas_testeo$altura,ClasificoMovil_test)
!=alturas_testeo$genero)
error_empirico_ventana
ClasificoVecinos_test=function(xNuevo){
ClasificoVecinos(alturas_testeo$altura,alturas_testeo$genero,xNuevo,10)
}
ClasificoMovil_test=function(xNuevo){
ClasificoMovil(alturas_testeo$altura,alturas_testeo$genero,xNuevo,2.5)
}
ClasificoGenerativo_test=function(xNuevo){
ClasificoGenerativo(alturas_testeo$altura,alturas_testeo$genero,xNuevo)
}
error_empirico_vecinos=mean(lapply(alturas_testeo$altura,ClasificoVecinos_test)
!=alturas_testeo$genero)
error_empirico_vecinos
error_empirico_ventana=mean(lapply(alturas_testeo$altura,ClasificoMovil_test)
!=alturas_testeo$genero)
error_empirico_ventana
error_empirico_op=mean(lapply(alturas_testeo$altura,ClasificoGenerativo_test)
!=alturas_testeo$genero)
error_empirico_op
ClasificoVecinos_test=function(xNuevo){
ClasificoVecinos(alturas_testeo$altura,alturas_testeo$genero,xNuevo,10)
}
ClasificoMovil_test=function(xNuevo){
ClasificoMovil(alturas_testeo$altura,alturas_testeo$genero,xNuevo,1.5)
}
ClasificoGenerativo_test=function(xNuevo){
ClasificoGenerativo(alturas_testeo$altura,alturas_testeo$genero,xNuevo)
}
error_empirico_vecinos=mean(lapply(alturas_testeo$altura,ClasificoVecinos_test)
!=alturas_testeo$genero)
error_empirico_vecinos
error_empirico_ventana=mean(lapply(alturas_testeo$altura,ClasificoMovil_test)
!=alturas_testeo$genero)
error_empirico_ventana
error_empirico_op=mean(lapply(alturas_testeo$altura,ClasificoGenerativo_test)
!=alturas_testeo$genero)
error_empirico_op
grilla=seq(160,170,0.01)
grila
grilla
grilla=seq(160,170,0.01)
datos_clasificador_vecinos=lapply(grilla,ClasificoGenerativo_test)
plot(grilla,datos_clasificador_vecinos,type='l',
xlab='Alturas', ylab='Genero clasificado',
main='Clasificador Vecinos')
datos_clasificador_vecinos
hist(grilla,datos_clasificador_vecinos,type='l',
xlab='Alturas', ylab='Genero clasificado',
main='Clasificador Vecinos')
hist(grilla,datos_clasificador_vecinos,
xlab='Alturas', ylab='Genero clasificado',
main='Clasificador Vecinos')
as.numeric(datos_clasificador_vecinos)
datos_clasificador_vecinos
datos_clasificador_vecinos[datos_clasificador_vecinos=='M']=0
datos_clasificador_vecinos[datos_clasificador_vecinos=='F']=1
datos_clasificador_vecinos
plot(grilla,as.numeric(datos_clasificador_vecinos), type='l',
xlab='Alturas', ylab='Genero clasificado',
main='Clasificador Vecinos')
plot(grilla,as.numeric(datos_clasificador_vecinos),
xlab='Alturas', ylab='Genero clasificado', col='blue',
main='Clasificador Vecinos')
plot(grilla,as.numeric(datos_clasificador_vecinos), type='l',
xlab='Alturas', ylab='Genero clasificado', col='blue',
main='Clasificador Vecinos')
plot(grilla,datos_clasificador_vecinos, type='l',
xlab='Alturas', ylab='Genero clasificado', col='blue',
main='Clasificador Vecinos')
datos_clasificador_movil=lappy(grilla,ClasificoMovil_test)
datos_clasificador_movil=lapply(grilla,ClasificoMovil_test)
datos_clasificador_movil=lapply(grilla,ClasificoMovil_test)
ClasificoMovil_test(grilla[1])
ClasificoMovil_test(grilla[2])
ClasificoMovil_test(grilla[3])
ClasificoMovil_test(grilla[4])
lapply(grilla,ClasificoMovil_test)
datos_clasificador_generativo=lapply(grilla,ClasificoGenerativo_test)
datos_clasificador_generativo
length(grilla)
grilla[1000]
ClasificoMovil_test(grilla[1000])
ClasificoMovil_test(grilla[1001])
grilla=seq(160,170,0.01)
datos_clasificador_vecinos=lapply(grilla,ClasificoVecinos_test)
datos_clasificador_vecinos[datos_clasificador_vecinos=='M']=0
datos_clasificador_vecinos[datos_clasificador_vecinos=='F']=1
plot(grilla,datos_clasificador_vecinos, type='l',
xlab='Alturas', ylab='Genero clasificado', col='blue',
main='Clasificador Vecinos')
lapply(grilla,ClasificoMovil_test)
datos_clasificador_movil=c()
for(i in grilla){datos_clasificador_movil=c(datos_clasificador_movil,ClasificadorMovil_test(i))}
for(i in grilla){datos_clasificador_movil=c(datos_clasificador_movil,ClasificoMovil_test(i))}
for(i in (1:1001)){datos_clasificador_movil=c(datos_clasificador_movil,ClasificoMovil_test(grilla[i]))}
ClasificoMovil_test(grilla[1])
ClasificoMovil_test(grilla[2])
ClasificoMovil_test(grilla[3])
grilla
ClasificoMovil_test(grilla)
ClasificoMovil_test(grilla[1001])
ClasificoMovil_test(grilla[1002])
grilla[1002]
grilla[0]
grilla
length(grilla)
ClasificoMovil_test(grilla[1001])
ClasificoMovil_test(grilla[1002])
for(i in (1:1000)){datos_clasificador_movil=c(datos_clasificador_movil,ClasificoMovil_test(grilla[i]))}
for(i in (1:100)){datos_clasificador_movil=c(datos_clasificador_movil,ClasificoMovil_test(grilla[i]))}
for(i in (1:900)){datos_clasificador_movil=c(datos_clasificador_movil,ClasificoMovil_test(grilla[i]))}
for(i in (1:800)){datos_clasificador_movil=c(datos_clasificador_movil,ClasificoMovil_test(grilla[i]))}
for(i in (1:300)){datos_clasificador_movil=c(datos_clasificador_movil,ClasificoMovil_test(grilla[i]))}
for(i in (1:600)){datos_clasificador_movil=c(datos_clasificador_movil,ClasificoMovil_test(grilla[i]))}
for(i in (1:700)){datos_clasificador_movil=c(datos_clasificador_movil,ClasificoMovil_test(grilla[i]))}
for(i in (1:750)){datos_clasificador_movil=c(datos_clasificador_movil,ClasificoMovil_test(grilla[i]))}
for(i in (700:750)){datos_clasificador_movil=c(datos_clasificador_movil,ClasificoMovil_test(grilla[i]))}
for(i in (700:725)){datos_clasificador_movil=c(datos_clasificador_movil,ClasificoMovil_test(grilla[i]))}
for(i in (700:710)){datos_clasificador_movil=c(datos_clasificador_movil,ClasificoMovil_test(grilla[i]))}
for(i in (710:725)){datos_clasificador_movil=c(datos_clasificador_movil,ClasificoMovil_test(grilla[i]))}
for(i in (710:720)){datos_clasificador_movil=c(datos_clasificador_movil,ClasificoMovil_test(grilla[i]))}
ClasificoMovil_test(grilla[710])
ClasificoMovil_test(grilla[71|])
ClasificoMovil_test(grilla[711])
ClasificoMovil_test(grilla[712])
grilla[712]
ClasificoMovil_test(grilla[712])
ClasificoMovil(alturas_testeo$altura,alturas_testeo$genero,167.11,1)
proporcion_F=mean(alturas_testeo$genero[167.11-1<=alturas_testeo$altura
& alturas_testeo$altura <= 167.11+1]=='F')
mean(alturas_testeo$genero[167.11-1<=alturas_testeo$altura
& alturas_testeo$altura <= 167.11+1]=='F')
alturas_testeo$genero[167.11-1<=alturas_testeo$altura
& alturas_testeo$altura <= 167.11+1]=='F'
167.11-1<=alturas_testeo$altura & alturas_testeo$altura <= 167.11+1
ClasificoMovil_test(grilla[712])
ClasificoMovil=function(X, Y, xNuevo, h){
if(all(X > xNuevo+h) || all(X < xNuevo-h)){
NA}else{
proporcion_F=mean(Y[xNuevo-h<=X
& X <= xNuevo+h]=='F')
if(proporcion_F>=0.5)
{'F'}else{'M'}
}
}
ClasificoMovil_test(167.11)
X=alturas_testeo$altura
Y=alturas_testeo$genero
all(X > 167.11+1) || all(X < 167.11-1)
[xNuevo-h<=X
& X <= xNuevo+h]
xNuevo=167.11
h=1
[xNuevo-h<= X & X <= xNuevo+h]
xNuevo-h<= X & X <= xNuevo+h
all(X > 167.11+1)
all(X < 167.11-1)
X
X <= xNuevo+h
xNuevo-h<= X
X <= xNuevo+h
X
xNuevo-h<= X & X <= xNuevo+h
sum(xNuevo-h<= X & X <= xNuevo+h)
datos_clasificador_movil
datos_clasificador_movil==NA
datos_clasificador_movil=lapply(grilla,ClasificoMovil_test)
datos_clasificador_movil=lapply(grilla,ClasificoMovil_test)
ClasificoMovil_test(167.11)
ClasificoMovil=function(X, Y, xNuevo, h){
if(sum(xNuevo-h<=X & X <= xNuevo+h)==0){
NA}else{
proporcion_F=mean(Y[xNuevo-h<=X
& X <= xNuevo+h]=='F')
if(proporcion_F>=0.5)
{'F'}else{'M'}
}
}
ClasificoMovil_test(167.11)
datos_clasificador_movil=lapply(grilla,ClasificoMovil_test)
datos_clasificador_movil
datos_clasificador_movil==NA
datos_clasificador_movil=lapply(grilla,ClasificoMovil_test)
datos_clasificador_movil[datos_clasificador_movil=='M']=0
datos_clasificador_movil[datos_clasificador_movil=='F']=1
datos_clasificador_movil
datos_clasificador_movil[712]
datos_clasificador_movil=lapply(grilla,ClasificoMovil_test)
datos_clasificador_movil[datos_clasificador_movil=='M']=0
datos_clasificador_movil[datos_clasificador_movil=='F']=1
datos_clasificador_generativo=lapply(grilla,ClasificoGenerativo_test)
datos_clasificador_generativo[datos_clasificador_generativo=='M']=0
datos_clasificador_generativo[datos_clasificador_generativo=='F']=1
plot(grilla,datos_clasificador_vecinos, type='l',
xlab='Alturas', ylab='Genero clasificado', col='blue',
main='Clasificadores')
points(grilla,datos_clasificador_movil, type='l', col='red')
points(grilla,datos_clasificador_generativo, col='magenta')
plot(grilla,datos_clasificador_vecinos, type='l',
xlab='Alturas', ylab='Genero clasificado', col='blue',
main='Clasificadores')
points(grilla,datos_clasificador_movil, type='l', col='red')
points(grilla,datos_clasificador_generativo, type='l', col='magenta')
l=c(1,2,NA)
l=l(rm.NA=T)
l=l(na.rm=T)
datos_clasificador_movil=datos_clasificador_movil[
!datos_clasificador_movil %in% NA]
datos_clasificador_movil[712]
which(datos_clasificador_movil==NA)
datos_clasificador_movil=lapply(grilla,ClasificoMovil_test)
datos_clasificador_movil[datos_clasificador_movil=='M']=0
datos_clasificador_movil[datos_clasificador_movil=='F']=1
datos_clasificador_movil=datos_clasificador_movil[
!datos_clasificador_movil %in% NA]
datos_clasificador_movil[712]
datos_clasificador_movil[713]
datos_clasificador_movil[714]
datos_clasificador_movil[715]
datos_clasificador_movil[1]
datos_clasificador_movil[1000]
datos_clasificador_movil[725]
datos_clasificador_movil[725]
datos_clasificador_movil[726]
datos_clasificador_movil[727]
datos_clasificador_movil[728]
datos_clasificador_movil[729]
datos_clasificador_movil[73]
datos_clasificador_movil[735]
datos_clasificador_movil[760]
l
l=l[!l %in% NA]
l
datos_clasificador_movil=datos_clasificador_movil[
!datos_clasificador_movil %in% NA]
which(datos_clasificador_movil==NA)
which(datos_clasificador_movil=='NA')
datos_clasificador_movil=lapply(grilla,ClasificoMovil_test)
datos_clasificador_movil[datos_clasificador_movil=='M']=0
datos_clasificador_movil[datos_clasificador_movil=='F']=1
datos_clasificador_movil=datos_clasificador_movil[
!datos_clasificador_movil %in% datos_clasificador_movil
[which(datos_clasificador_movil=='NA')]]
which(datos_clasificador_movil=='NA')
datos_clasificador_generativo=lapply(grilla,ClasificoGenerativo_test)
datos_clasificador_generativo[datos_clasificador_generativo=='M']=0
datos_clasificador_generativo[datos_clasificador_generativo=='F']=1
plot(grilla,datos_clasificador_vecinos, type='l',
xlab='Alturas', ylab='Genero clasificado', col='blue',
main='Clasificadores')
points(grilla,datos_clasificador_movil, type='l', col='red')
p_Y_1=genero=='F'/length(genero)
p_Y_1=sum(genero=='F')/length(genero)
p_Y_1
datos_clasificador_movil=lapply(grilla,ClasificoMovil_test)
datos_clasificador_movil[datos_clasificador_movil=='M']=0
datos_clasificador_movil[datos_clasificador_movil=='F']=1
datos_clasificador_movil=datos_clasificador_movil[
!datos_clasificador_movil %in% datos_clasificador_movil
[which(datos_clasificador_movil=='NA')]]
grilla_aux=grilla[!grilla %in% grilla[which(datos_clasificador_movil=='NA')]]
plot(grilla,datos_clasificador_vecinos, type='l',
xlab='Alturas', ylab='Genero clasificado', col='blue',
main='Clasificadores')
points(grilla_aux,datos_clasificador_movil, type='l', col='red')
length(datos_clasificador_movil)
length(grilla)
length(grilla_aux)
datos_clasificador_movil=lapply(grilla,ClasificoMovil_test)
datos_clasificador_movil[datos_clasificador_movil=='M']=0
datos_clasificador_movil[datos_clasificador_movil=='F']=1
grilla_aux=grilla[!grilla %in%
grilla[which(datos_clasificador_movil=='NA')]]
datos_clasificador_movil=datos_clasificador_movil[
!datos_clasificador_movil %in% datos_clasificador_movil
[which(datos_clasificador_movil=='NA')]]
plot(grilla,datos_clasificador_vecinos, type='l',
xlab='Alturas', ylab='Genero clasificado', col='blue',
main='Clasificadores')
points(grilla_aux,datos_clasificador_movil, type='l', col='red')
points(grilla,datos_clasificador_generativo, type='l', col='magenta')
