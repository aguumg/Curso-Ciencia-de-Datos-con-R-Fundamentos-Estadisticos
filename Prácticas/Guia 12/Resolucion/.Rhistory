c=2
c
materia[,2]
sum(materia[2,])
Femenino
'Femenino'
materias
materia
materia[Femenino]
materia['Femenino']
materia['Femenino',]
p_a=materia['Femenino','Biología']
p_a
p_a=materia[1,1]
p_a
2^(3-1)
knitr::opts_chunk$set(echo = TRUE)
probas=c()
for(i in (0:8)){
probas=c(probas,choose(8,i)*0.3^i*0.7^(1-i))
}
barplot(probas)
probas=paste((0:8),probas)
probas
barplot(probas)
probas=c()
for(i in (0:8)){
probas=c(probas,choose(8,i)*0.3^i*0.7^(1-i))
}
probas=c()
for(i in (0:8)){
probas=c(probas,list(i=choose(8,i)*0.3^i*0.7^(1-i)))
}
probas
probas=c()
for(i in (0:8)){
probas=c(probas,list(get(i)=choose(8,i)*0.3^i*0.7^(1-i)))
i=1
get(i)
?get
probas=c()
for(i in (0:8)){
probas=c(probas,list(2=choose(8,i)*0.3^i*0.7^(1-i)))
probas=c()
for(i in (0:8)){
probas=c(probas,list(i=choose(8,i)*0.3^i*0.7^(1-i)))
}
probas=c()
for(i in (0:8)){
probas=c(probas,choose(8,i)*0.3^i*0.7^(1-i))
}
names(proba)
names(probas)
probas=as.dataframe(probas)
probas=dataframe(probas)
probas=data.frame(probas)
proba
probas
barplot(probas)
probas=c()
for(i in (0:8)){
probas=c(probas,choose(8,i)*0.3^i*0.7^(1-i))
}
barplot(probas)
setwd("~/Escritorio/1er Cuatri/Ciencia de Datos con R_ Fundamentos Estadisticos/Clases/Clase 2 (gráficos)/Ejemplos propios en R")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
tit=read.csv('titanic.csv', header=T)
attach(tit)
freq.sex=table(sex)
freq.sex
sex
freq.sex
?table
probas=c()
for(i in (0:8)){
probas=c(probas,choose(8,i)*0.3^i*0.7^(1-i))
}
table(probas)
table((0:8),probas)
table((0,8)=probas)
table((0:8)=probas)
probas
?barplot
probas=c()
for(i in (0:8)){
probas=c(probas,choose(8,i)*0.3^i*0.7^(1-i))
}
barplot(probas, names.arg = (0:8))
barplot(probas, names.arg = (0:8),
xlab='Cantidad de huevos removidos',
ylab='Probabilidad',col='blue')
barplot(probas, names.arg = (0:8),
xlab='Cantidad de huevos removidos',
ylab='Probabilidad',col='blue',
main='P(X=x|Y=0)')
barplot(probas_R, names.arg = (0:8),
xlab='Cantidad de huevos removidos dado rechazadora',
ylab='Probabilidad X=x dado rechazadora',col='red',
main='P(X=x|Y=1)', ylim=c(0, max(probas_R)))
probas_R=c()
for(i in (0:8)){
probas_R=c(probas_R,choose(8,i)*0.8^i*0.2^(8-i))
}
barplot(probas_R, names.arg = (0:8),
xlab='Cantidad de huevos removidos dado rechazadora',
ylab='Probabilidad X=x dado rechazadora',col='red',
main='P(X=x|Y=1)', ylim=c(0, max(probas_R)))
barplot(probas_A, names.arg = (0:8),
xlab='Cantidad de huevos removidos',
ylab='Probabilidad X=x dado aceptadora',col='blue',
main='P(X=x|Y=0)')
probas_A=c()
for(i in (0:8)){
probas_A=c(probas_A,choose(8,i)*0.3^i*0.7^(8-i))
}
barplot(probas_A, names.arg = (0:8),
xlab='Cantidad de huevos removidos',
ylab='Probabilidad X=x dado aceptadora',col='blue',
main='P(X=x|Y=0)')
barplot(probas_A, names.arg = (0:8),
xlab='Cantidad de huevos removidos',
ylab='Probabilidad X=x dado aceptadora',col='blue',
main='P(X=x|Y=0)',ylim=c(0, max(probas_A)))
probas_A
barplot(probas_A, names.arg = (0:8),
xlab='Cantidad de huevos removidos',
ylab='Probabilidad X=x',col='blue',
main='P(X=x|Y=0)',ylim=c(0, max(probas_A)))
barplot(probas_R, names.arg = (0:8),
xlab='Cantidad de huevos removidos dado rechazadora',
ylab='Probabilidad X=x dado rechazadora',col='red',
main='P(X=x|Y=1)')
p_5_dado_A=choose(8,5)*0.3^5*0.7^3
p_5_dado_R=choose(8,5)*0.8^5*0.2^3
p_A=0.9
p_R=0.1
p_5=p_5_dado_A*p_A+p_5_dado_R*p_R
probas_5=c()
for(i in (0:8)){
probas_5=c(probas_5,choose(8,i)*(0.3^i*0.7^(8-i)*p_A+0.8^i*0.2^(8-i)*p_R))
}
barplot(probas_5, names.arg = (0:8),
xlab='Cantidad de huevos removidos',
ylab='Probabilidad X=x',col='magenta',
main='P(X=x)')
?table
datos_probas=matrix(c(rbind(probas_A,probas_R)),ncol=2,byrow = TRUE)
rownames(datos_probas)=(0:8)
colnames(datos_probas)=(0:1)
tabla_conjunta=table(datos_probas)
tabla_conjunta
datos_probas=matrix(c(rbind(probas_A,probas_R)),ncol=2,byrow = TRUE)
rownames(datos_probas)=(0:8)
colnames(datos_probas)=(0:1)
tabla_conjunta=data.frame(datos_probas)
tabla_conjunta
datos_probas=matrix(c(rbind(probas_A,probas_R)),ncol=2,byrow = TRUE)
rownames(datos_probas)=(0:8)
colnames(datos_probas)=c(0,1)
tabla_conjunta=data.frame(datos_probas)
tabla_conjunta
probas_A
probas_B
probas_R
c(rbind(probas_A,probas_R)
)
c(rbind(c(1,2,3),c(1,2,3),c(1,2,3)))
datos_probas=matrix(c(rbind(probas_A,probas_R,probas_5)),ncol=3,byrow = TRUE)
rownames(datos_probas)=c((0:8))
colnames(datos_probas)=c(0,1,'pX(-)')
tabla_conjunta=data.frame(datos_probas)
tabla_conjunta
datos_probas=matrix(c(rbind(probas_A,probas_R,probas_5)),ncol=3,byrow = TRUE)
rownames(datos_probas)=c((0:8))
colnames(datos_probas)=c(0,1,'pX(x)')
tabla_conjunta=data.frame(datos_probas)
tabla_conjunta
datos_probas=matrix(c(rbind(probas_A,probas_R,probas_5)),ncol=3,byrow = TRUE)
rownames(datos_probas)=c((0:8))
colnames(datos_probas)=c(0,1,'pX\(x)')
datos_probas=matrix(c(rbind(probas_A,probas_R,probas_5)),ncol=3,byrow = TRUE)
rownames(datos_probas)=c((0:8))
colnames(datos_probas)=c(0,1,'pX(x)')
tabla_conjunta=data.frame(datos_probas)
tabla_conjunta
datos_probas=matrix(c(rbind(probas_A,probas_R,probas_5)),ncol=3,byrow = TRUE)
rownames(datos_probas)=c((0:8))
colnames(datos_probas)=c(0,1,'pX')
tabla_conjunta=data.frame(datos_probas)
tabla_conjunta
datos_probas=matrix(c(rbind(probas_A,probas_R,probas_5),p_A,p_R,NA),ncol=3,byrow = TRUE)
rownames(datos_probas)=c((0:8),'pY')
colnames(datos_probas)=c(0,1,'pX')
tabla_conjunta=data.frame(datos_probas)
tabla_conjunta
datos_probas=matrix(c(rbind(probas_A,probas_R,probas_5),p_A,p_R,NA),ncol=3,byrow = TRUE)
rownames(datos_probas)=c((0:8),'pY')
colnames(datos_probas)=c('y=0','y=1','pX')
tabla_conjunta=data.frame(datos_probas)
tabla_conjunta
datos_probas=matrix(c(rbind(probas_A,probas_R,probas_5),p_A,p_R,NA),ncol=3,byrow = TRUE)
rownames(datos_probas)=c((0:8),'pY')
colnames(datos_probas)=c('y%=%0','y%=%1','pX')
tabla_conjunta=data.frame(datos_probas)
tabla_conjunta
datos_probas=matrix(c(rbind(probas_A,probas_R,probas_5),p_A,p_R,NA),ncol=3,byrow = TRUE)
rownames(datos_probas)=c((0:8),'pY')
colnames(datos_probas)=c('expression(y%=%0)','y%=%1','pX')
tabla_conjunta=data.frame(datos_probas)
tabla_conjunta
?expression
expression(1+9)
datos_probas=matrix(c(rbind(probas_A,probas_R,probas_5),p_A,p_R,NA),ncol=3,byrow = TRUE)
rownames(datos_probas)=c((0:8),'pY')
colnames(datos_probas)=c(expression(y=0),'y%=%1','pX')
tabla_conjunta=data.frame(datos_probas)
tabla_conjunta
datos_probas=matrix(c(rbind(probas_A,probas_R,probas_5),p_A,p_R,NA),ncol=3,byrow = TRUE)
rownames(datos_probas)=c((0:8),'pY')
colnames(datos_probas)=c(expression('y=0'),'y%=%1','pX')
tabla_conjunta=data.frame(datos_probas)
tabla_conjunta
expression("T ">="5")
datos_probas=matrix(c(rbind(probas_A,probas_R,probas_5),p_A,p_R,NA),ncol=3,byrow = TRUE)
rownames(datos_probas)=c((0:8),'pY')
colnames(datos_probas)=c(expression("T ">="5"),'y%=%1','pX')
tabla_conjunta=data.frame(datos_probas)
tabla_conjunta
datos_probas=matrix(c(rbind(probas_A,probas_R,probas_5),p_A,p_R,NA),ncol=3,byrow = TRUE)
rownames(datos_probas)=c((0:8),'pY')
colnames(datos_probas)=c(expression("y "="5"),'y%=%1','pX')
tabla_conjunta=data.frame(datos_probas)
tabla_conjunta
datos_probas=matrix(c(rbind(probas_A,probas_R,probas_5),p_A,p_R,NA),ncol=3,byrow = TRUE)
rownames(datos_probas)=c((0:8),'pY')
colnames(datos_probas)=c(paste('y',0),'y%=%1','pX')
tabla_conjunta=data.frame(datos_probas)
tabla_conjunta
datos_probas=matrix(c(rbind(probas_A,probas_R,probas_5),p_A,p_R,NA),ncol=3,byrow = TRUE)
rownames(datos_probas)=c((0:8),'pY')
colnames(datos_probas)=c(paste('y=',0),'y%=%1','pX')
tabla_conjunta=data.frame(datos_probas)
tabla_conjunta
intToUtf8(8804)
intToUtf8(=)
setwd("~/Escritorio/1er Cuatri/Ciencia de Datos con R_ Fundamentos Estadisticos/Prácticas/Guia 11/Resolucion guia 11 clase")
depredados=read.csv('depredadosclasificadas.csv',header = TRUE)
View(depredados)
names(depredados)
attach(depredados)
X
Y
proporcion_A=sum(Y==0)/length(Y)
proporcion_A
sum(Y==1)/length(Y)
proporcion_X_5=sum(X==0)/length(X)
proporcion_X_5
datos_probas=matrix(c(rbind(probas_A,probas_R,probas_5),p_A,p_R,NA),ncol=3,byrow = TRUE)
rownames(datos_probas)=c((0:8),'pY')
colnames(datos_probas)=c('y=0','y==1','pX')
tabla_conjunta=data.frame(datos_probas)
tabla_conjunta
proporcion_X_5=sum(X==0)/length(X)
proporcion_X_5
probas_x=c()
for(i in (0:8)){
probas_x=c(probas_x,choose(8,i)*(0.3^i*0.7^(8-i)*p_A+0.8^i*0.2^(8-i)*p_R))
}
proporcion_X_5=sum(X==0 & Y==0)/length(X)
proporcion_X_5
depredados[X==5 & Y==0]
proporcion_X_5=sum(X==5 & Y==0)/length(X)
proporcion_X_5
depredados[X==5 & Y==0,]
length(depredados[X==5 & Y==0,])
length(depredados[X==5 & Y==0,][,1])
length(depredados[X==5,][,1])
length(X)
depredados
probas_A_estimadas=c()
for(i in (0:8)){
probas_A_estimadas=c(probas_A_estimadas,sum(X==i & Y==0)/length(X))
}
barplot(c(probas_A,probas_A_estimadas),col = 'red')
barplot(c(probas_A,probas_A_estimadas),col = c('red','blue'))
barplot(probas_A,col = 'red')
barplot(probas_A_estimadas,col = 'blue')
probas_A
probas_A_estimadas
rbind(probas_A,probas_A_estimadas)
cbind(probas_A,probas_A_estimadas)
barplot(cbind(probas_A,probas_A_estimadas),col = c('red','blue'))
barplot(rbind(probas_A,probas_A_estimadas),col = c('red','blue'))
barplot(rbind(probas_A,probas_A_estimadas),col = c('red','blue'),
beside=T)
barplot(cbind(probas_A,probas_A_estimadas),col = c('red','blue'),
beside=T)
barplot(c(probas_A,probas_A_estimadas),col = c('red','blue'))
barplot(c(probas_A,probas_A_estimadas),col = c("blue","red")[findInterval((0:8), vec=c(0,8,0,8))])
barplot(c(probas_A,probas_A_estimadas),col = c("blue","red")[findInterval((0:8), vec=c(0,8))])
barplot(c(probas_A,probas_A_estimadas),col = c("blue","red")[findInterval((0:8), vec=c(0,4))])
barplot(c(probas_A,probas_A_estimadas),col = rep(c("blue","red"),each=8))
barplot(c(probas_A,probas_A_estimadas),col = rep(c("blue","red"),each=9))
probas_R_estimadas=c()
for(i in (0:8)){
probas_R_estimadas=c(probas_R_estimadas,sum(X==i & Y==1)/length(X))
}
barplot(c(probas_R,probas_R_estimadas),col = rep(c("blue","red"),each=9))
probas_R_estimadas
probas_R
datos_frecuencias=matrix(c(rbind(probas_A_estimadas,probas_R_estimadas)),ncol=2,byrow = TRUE)
rownames(datos_frecuencias)=c((0:8))
colnames(datos_frecuencias)=c('y=0','y=1')
tabla_frec_estimadas=data.frame(datos_frecuencias)
tabla_frec_estimadas
probas_A=format(round(probas_A, 2), nsmall = 2)
probas_A
probas_A_estimadas=format(round(probas_A_estimadas, 2), nsmall = 2)
datos_frecuencias=matrix(c(rbind(probas_A_estimadas,probas_R_estimadas)),ncol=2,byrow = TRUE)
rownames(datos_frecuencias)=c((0:8))
colnames(datos_frecuencias)=c('y=0','y=1')
tabla_frec_estimadas=data.frame(datos_frecuencias)
tabla_frec_estimadas
probas_x_1=probas_x_0=c()
for(x in (0:8)){
probas_x_dado_R=choose(8,x)*0.8^x*0.2^(8-x)
proba_x_dado_A=choose(8,x)*0.3^x*0.7^(8-x)
probas_x_0=c(probas_x_0,probas_x_dado_A*p_A)
probas_x_1=c(probas_x_1,probas_x_dado_R*p_R)
}
probas_x_1=probas_x_0=c()
for(x in (0:8)){
probas_x_dado_R=choose(8,x)*0.8^x*0.2^(8-x)
proba_x_dado_A=choose(8,x)*0.3^x*0.7^(8-x)
probas_x_0=c(probas_x_0,probas_x_dado_A*p_A)
probas_x_1=c(probas_x_1,probas_x_dado_R*p_R)
}
probas_x_1=probas_x_0=c()
for(x in (0:8)){
proba_x_dado_R=choose(8,x)*0.8^x*0.2^(8-x)
proba_x_dado_A=choose(8,x)*0.3^x*0.7^(8-x)
probas_x_0=c(probas_x_0,probas_x_dado_A*p_A)
probas_x_1=c(probas_x_1,probas_x_dado_R*p_R)
}
probas_x_1=probas_x_0=c()
for(x in (0:8)){
proba_x_dado_R=choose(8,x)*0.8^x*0.2^(8-x)
proba_x_dado_A=choose(8,x)*0.3^x*0.7^(8-x)
probas_x_0=c(probas_x_0,proba_x_dado_A*p_A)
probas_x_1=c(probas_x_1,proba_x_dado_R*p_R)
}
datos_probas=matrix(c(rbind(probas_x_0,probas_x_1,probas_x),p_A,p_R,NA),ncol=3,byrow = TRUE)
rownames(datos_probas)=c((0:8),'pY')
colnames(datos_probas)=c('y=0','y=1','pX')
tabla_conjunta=data.frame(datos_probas)
tabla_conjunta
proporcion_X_5=sum(X==5 & Y==0)/length(X)
proba_2=mean(X[Y==0]==5)
proba_2
proporcion_X_5
depredados[X==5 & Y==0]
depredados[X==5 & Y==0,]
sum(depredados[X==5 & Y==0,])
mean(depredados[X==5 & Y==0,])
mean(depredados[X==5 & Y==0,][,1])
depredados[X==5 & Y==0,]
sum(X==5 & Y==0)/length(X)
mean(X[Y==0]==5)
X[Y==0]
X[Y==0]==5
sum(X==5 & Y==0)
sum(X[Y==0]==5)
sum(X[Y==0]==5)/length(X[Y==0]==5)
proporcion_X_5=sum(X==5 & Y==0)/length(X[Y==0])
proba_2=mean(X[Y==0]==5)
proba_2
proporcion_X_5
proporcion_X_5_MAL=sum(X==5 & Y==0)/length(X)
# Este está mal porque el espacio muestral no es todo S sino S dado Y=0!
proporcion_X_5=sum(X==5 & Y==0)/length(X[Y==0])
# otra forma
mean(X[Y==0]==5)
proporcion_X_5
setwd("~/Escritorio/1er Cuatri/Ciencia de Datos con R_ Fundamentos Estadisticos/Prácticas/Guia 12/Resolucion")
knitr::opts_chunk$set(echo = TRUE)
depredados=read.csv('depredadosclasificadas.csv',header = TRUE)
attach(depredados)
depredados=read.csv('depredadosclasificadas.csv',header = TRUE)
attach(depredados)
probas_A_estimadas=c()
for(i in (0:8)){
probas_A_estimadas=c(probas_A_estimadas,sum(X==i & Y==0)/length(X[Y==0]))
}
probas_R_estimadas=c()
for(i in (0:8)){
probas_R_estimadas=c(probas_R_estimadas,sum(X==i & Y==1)/length(X[Y==1]))
}
probas_A_estimadas=format(round(probas_A_estimadas, 5), nsmall = 5)
probas_R_estimadas=format(round(probas_R_estimadas, 5), nsmall = 5)
# Nos quedamos con 2 decimales.
datos_frecuencias=matrix(c(rbind(probas_A_estimadas,probas_R_estimadas)),ncol=2,byrow = TRUE)
rownames(datos_frecuencias)=c((0:8))
colnames(datos_frecuencias)=c('y=0','y=1')
tabla_frec_estimadas=data.frame(datos_frecuencias)
tabla_frec_estimadas
tabla_frec_estimadas
tabla_frec_estimadas[0,0]
tabla_frec_estimadas[1,1]
tabla_frec_estimadas[0,1]
tabla_frec_estimadas[1,1]
tabla_frec_estimadas[0,y.0]
tabla_frec_estimadas[0,'y.0']
tabla_frec_estimadas[0,]
tabla_frec_estimadas[1,]
tabla_frec_estimadas[9,]
p_XY=function(x,y){
tabla_frec_estimadas(x+1,y+1)
}
g=function(x){
if(x<=3){0}else{1}
}
p_XY=function(x,y){
tabla_frec_estimadas(x+1,y+1)
}
error=9
for(x in (0:8)){
error=error-p_XY(x,g(x))/(p_XY(x,0)+p_XY(x,1))
}
g=function(x){
if(x<=3){0}else{1}
}
p_XY=function(x,y){
tabla_frec_estimadas[x+1,y+1]
}
error=9
for(x in (0:8)){
error=error-p_XY(x,g(x))/(p_XY(x,0)+p_XY(x,1))
}
error
tabla_frec_estimadas[1,1]
tabla_frec_estimadas
tabla_frec_estimadas[1,1][1]
tabla_frec_estimadas[1,1]
tabla_frec_estimadas[1,1]+1
tabla_frec_estimadas[1,1]
tabla_frec_estimadas[2,1]
tabla_frec_estimadas[3,1]
tabla_frec_estimadas[2,1]
tabla_frec_estimadas[3,1]
c(rbind(probas_A_estimadas,probas_R_estimadas))[1,1]
rbind(probas_A_estimadas,probas_R_estimadas)
cbind(probas_A_estimadas,probas_R_estimadas)
cbind(probas_A_estimadas,probas_R_estimadas)[1,1]
cbind(probas_A_estimadas,probas_R_estimadas)[1,1]+1
get(cbind(probas_A_estimadas,probas_R_estimadas)[1,1])
rbind(probas_A_estimadas,probas_R_estimadas)[1,1]
rbind(probas_A_estimadas,probas_R_estimadas)
matrix(probas_A_estimadas,probas_R_estimadas)
matrix(probas_A_estimadas,probas_R_estimadas,ncol=9)
matrix(c(rbind(probas_A_estimadas,probas_R_estimadas)),ncol=2,byrow = TRUE)
matrix(c(rbind(probas_A_estimadas,probas_R_estimadas)),ncol=2,byrow = TRUE)
matrix(c(rbind(probas_A_estimadas,probas_R_estimadas)),ncol=2,byrow = TRUE)[1,1]
get(matrix(c(rbind(probas_A_estimadas,probas_R_estimadas)),ncol=2,byrow = TRUE)[1,1])
as.numeric(matrix(c(rbind(probas_A_estimadas,probas_R_estimadas)),ncol=2,byrow = TRUE)[1,1])
as.numeric(tabla_frec_estimadas[3,1])
tabla_frec_estimadas[3,1]
g=function(x){
if(x<=3){0}else{1}
}
p_XY=function(x,y){
as.numeric(datos_frecuencias[x+1,y+1])
}
error=9
for(x in (0:8)){
error=error-p_XY(x,g(x))/(p_XY(x,0)+p_XY(x,1))
}
error
g=function(x){
if(x<=3){0}else{1}
}
p_XY=function(x,y){
as.numeric(datos_frecuencias[x+1,y+1])
}
error=9
for(x in (0:8)){
error=error-p_XY(x,g(x))
}
error
g=function(x){
if(x<=3){0}else{1}
}
p_XY=function(x,y){
as.numeric(datos_frecuencias[x+1,y+1])
}
error=1
for(x in (0:8)){
error=error-p_XY(x,g(x))
}
error
as.numeric(datos_frecuencias[0+1,0+1])
ERROR
error
rownames(datos_frecuencias)=c((0:8))
colnames(datos_frecuencias)=c('y=0','y=1')
tabla_frec_estimadas=data.frame(datos_frecuencias)
tabla_frec_estimadas
datos_frecuencias=matrix(c(cbind(probas_A_estimadas,probas_R_estimadas)),ncol=9,byrow = TRUE)
colnames(datos_frecuencias)=c((0:8))
rownames(datos_frecuencias)=c('y=0','y=1')
tabla_frec_estimadas=data.frame(datos_frecuencias)
tabla_frec_estimadas
